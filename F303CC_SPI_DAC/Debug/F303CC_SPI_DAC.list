
F303CC_SPI_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ce0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001e68  08001e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e98  08001e98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e98  08001e98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e98  08001e98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e9c  08001e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001eac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001eac  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b41  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001225  00000000  00000000  00026b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f8  00000000  00000000  00027da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  000283a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186c0  00000000  00000000  000288f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b21  00000000  00000000  00040fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cdf8  00000000  00000000  00046ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d38c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016bc  00000000  00000000  000d3944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e50 	.word	0x08001e50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001e50 	.word	0x08001e50

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9b6 	bl	800053c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f807 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f888 	bl	80002e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d8:	f000 f848 	bl	800026c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 80001dc:	f000 f980 	bl	80004e0 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x18>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b090      	sub	sp, #64	; 0x40
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0318 	add.w	r3, r7, #24
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fe25 	bl	8001e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
 8000202:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000204:	2301      	movs	r3, #1
 8000206:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000216:	2302      	movs	r3, #2
 8000218:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000220:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000224:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fc64 	bl	8000af8 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000236:	f000 f8a1 	bl	800037c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023e:	2302      	movs	r3, #2
 8000240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2102      	movs	r1, #2
 8000254:	4618      	mov	r0, r3
 8000256:	f001 fb57 	bl	8001908 <HAL_RCC_ClockConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000260:	f000 f88c 	bl	800037c <Error_Handler>
  }
}
 8000264:	bf00      	nop
 8000266:	3740      	adds	r7, #64	; 0x40
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_SPI1_Init+0x74>)
 8000272:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <MX_SPI1_Init+0x78>)
 8000274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_SPI1_Init+0x74>)
 8000278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800027c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_SPI1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_SPI1_Init+0x74>)
 8000286:	f44f 7240 	mov.w	r2, #768	; 0x300
 800028a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_SPI1_Init+0x74>)
 800028e:	2200      	movs	r2, #0
 8000290:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <MX_SPI1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_SPI1_Init+0x74>)
 800029a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800029e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_SPI1_Init+0x74>)
 80002a2:	2208      	movs	r2, #8
 80002a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_SPI1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_SPI1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_SPI1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_SPI1_Init+0x74>)
 80002ba:	2207      	movs	r2, #7
 80002bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <MX_SPI1_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_SPI1_Init+0x74>)
 80002c6:	2208      	movs	r2, #8
 80002c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_SPI1_Init+0x74>)
 80002cc:	f001 fd02 	bl	8001cd4 <HAL_SPI_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f851 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028
 80002e4:	40013000 	.word	0x40013000

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 030c 	add.w	r3, r7, #12
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002fe:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <MX_GPIO_Init+0x8c>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <MX_GPIO_Init+0x8c>)
 8000304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <MX_GPIO_Init+0x8c>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000312:	60bb      	str	r3, [r7, #8]
 8000314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_GPIO_Init+0x8c>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a16      	ldr	r2, [pc, #88]	; (8000374 <MX_GPIO_Init+0x8c>)
 800031c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000320:	6153      	str	r3, [r2, #20]
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_GPIO_Init+0x8c>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032e:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_GPIO_Init+0x8c>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a10      	ldr	r2, [pc, #64]	; (8000374 <MX_GPIO_Init+0x8c>)
 8000334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_GPIO_Init+0x8c>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000342:	603b      	str	r3, [r7, #0]
 8000344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2101      	movs	r1, #1
 800034a:	480b      	ldr	r0, [pc, #44]	; (8000378 <MX_GPIO_Init+0x90>)
 800034c:	f000 fbbc 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000350:	2301      	movs	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 030c 	add.w	r3, r7, #12
 8000364:	4619      	mov	r1, r3
 8000366:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_GPIO_Init+0x90>)
 8000368:	f000 fa34 	bl	80007d4 <HAL_GPIO_Init>

}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40021000 	.word	0x40021000
 8000378:	48000400 	.word	0x48000400

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <HAL_MspInit+0x44>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <HAL_MspInit+0x44>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <HAL_MspInit+0x44>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <HAL_MspInit+0x44>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <HAL_MspInit+0x44>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_MspInit+0x44>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a17      	ldr	r2, [pc, #92]	; (8000450 <HAL_SPI_MspInit+0x7c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d128      	bne.n	8000448 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <HAL_SPI_MspInit+0x80>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a16      	ldr	r2, [pc, #88]	; (8000454 <HAL_SPI_MspInit+0x80>)
 80003fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <HAL_SPI_MspInit+0x80>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800040a:	613b      	str	r3, [r7, #16]
 800040c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <HAL_SPI_MspInit+0x80>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a10      	ldr	r2, [pc, #64]	; (8000454 <HAL_SPI_MspInit+0x80>)
 8000414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_SPI_MspInit+0x80>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000426:	23e0      	movs	r3, #224	; 0xe0
 8000428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042a:	2302      	movs	r3, #2
 800042c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000432:	2303      	movs	r3, #3
 8000434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000436:	2305      	movs	r3, #5
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 0314 	add.w	r3, r7, #20
 800043e:	4619      	mov	r1, r3
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f000 f9c6 	bl	80007d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000448:	bf00      	nop
 800044a:	3728      	adds	r7, #40	; 0x28
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40013000 	.word	0x40013000
 8000454:	40021000 	.word	0x40021000

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ac:	f000 f88c 	bl	80005c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <SystemInit+0x28>)
 80004ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004be:	4a07      	ldr	r2, [pc, #28]	; (80004dc <SystemInit+0x28>)
 80004c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <SystemInit+0x28>)
 80004ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004ce:	609a      	str	r2, [r3, #8]
#endif
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	/* MAIN CODE */
	

	while(1){
 80004e4:	e7fe      	b.n	80004e4 <main_s+0x4>
	...

080004e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000520 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ee:	e003      	b.n	80004f8 <LoopCopyDataInit>

080004f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004f6:	3104      	adds	r1, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <LoopForever+0xe>)
	adds	r2, r0, r1
 80004fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000500:	d3f6      	bcc.n	80004f0 <CopyDataInit>
	ldr	r2, =_sbss
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000504:	e002      	b.n	800050c <LoopFillZerobss>

08000506 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000506:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000508:	f842 3b04 	str.w	r3, [r2], #4

0800050c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <LoopForever+0x16>)
	cmp	r2, r3
 800050e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000510:	d3f9      	bcc.n	8000506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000512:	f7ff ffcf 	bl	80004b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000516:	f001 fc6f 	bl	8001df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051a:	f7ff fe55 	bl	80001c8 <main>

0800051e <LoopForever>:

LoopForever:
    b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000520:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000524:	08001ea0 	.word	0x08001ea0
	ldr	r0, =_sdata
 8000528:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800052c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000530:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000534:	20000090 	.word	0x20000090

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_Init+0x28>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <HAL_Init+0x28>)
 8000546:	f043 0310 	orr.w	r3, r3, #16
 800054a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f90d 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f808 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f7ff ff18 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40022000 	.word	0x40022000

08000568 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x54>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x58>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f917 	bl	80007ba <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f8ed 	bl	8000782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_InitTick+0x5c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000008 	.word	0x20000008
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x24>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_IncTick+0x24>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000008 	.word	0x20000008
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_GetTick+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000008c 	.word	0x2000008c

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	; (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f7ff ff8e 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff47 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff5c 	bl	8000650 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff8e 	bl	80006c0 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5d 	bl	800066c <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffb0 	bl	8000728 <SysTick_Config>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e2:	e154      	b.n	8000a8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f000 8146 	beq.w	8000a88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d003      	beq.n	800080c <HAL_GPIO_Init+0x38>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2b12      	cmp	r3, #18
 800080a:	d123      	bne.n	8000854 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	08da      	lsrs	r2, r3, #3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3208      	adds	r2, #8
 8000814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000818:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	220f      	movs	r2, #15
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	691a      	ldr	r2, [r3, #16]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	08da      	lsrs	r2, r3, #3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3208      	adds	r2, #8
 800084e:	6939      	ldr	r1, [r7, #16]
 8000850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	2203      	movs	r2, #3
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0203 	and.w	r2, r3, #3
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d00b      	beq.n	80008a8 <HAL_GPIO_Init+0xd4>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d007      	beq.n	80008a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089c:	2b11      	cmp	r3, #17
 800089e:	d003      	beq.n	80008a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b12      	cmp	r3, #18
 80008a6:	d130      	bne.n	800090a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68da      	ldr	r2, [r3, #12]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008de:	2201      	movs	r2, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	f003 0201 	and.w	r2, r3, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	2203      	movs	r2, #3
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 80a0 	beq.w	8000a88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000948:	4b58      	ldr	r3, [pc, #352]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a57      	ldr	r2, [pc, #348]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b55      	ldr	r3, [pc, #340]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000960:	4a53      	ldr	r2, [pc, #332]	; (8000ab0 <HAL_GPIO_Init+0x2dc>)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	3302      	adds	r3, #2
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	220f      	movs	r2, #15
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800098a:	d019      	beq.n	80009c0 <HAL_GPIO_Init+0x1ec>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a49      	ldr	r2, [pc, #292]	; (8000ab4 <HAL_GPIO_Init+0x2e0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d013      	beq.n	80009bc <HAL_GPIO_Init+0x1e8>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a48      	ldr	r2, [pc, #288]	; (8000ab8 <HAL_GPIO_Init+0x2e4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d00d      	beq.n	80009b8 <HAL_GPIO_Init+0x1e4>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a47      	ldr	r2, [pc, #284]	; (8000abc <HAL_GPIO_Init+0x2e8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d007      	beq.n	80009b4 <HAL_GPIO_Init+0x1e0>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a46      	ldr	r2, [pc, #280]	; (8000ac0 <HAL_GPIO_Init+0x2ec>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d101      	bne.n	80009b0 <HAL_GPIO_Init+0x1dc>
 80009ac:	2304      	movs	r3, #4
 80009ae:	e008      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009b0:	2305      	movs	r3, #5
 80009b2:	e006      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009b4:	2303      	movs	r3, #3
 80009b6:	e004      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009b8:	2302      	movs	r3, #2
 80009ba:	e002      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009c0:	2300      	movs	r3, #0
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	f002 0203 	and.w	r2, r2, #3
 80009c8:	0092      	lsls	r2, r2, #2
 80009ca:	4093      	lsls	r3, r2
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009d2:	4937      	ldr	r1, [pc, #220]	; (8000ab0 <HAL_GPIO_Init+0x2dc>)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a04:	4a2f      	ldr	r2, [pc, #188]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a2e:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a58:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	fa22 f303 	lsr.w	r3, r2, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f aea3 	bne.w	80007e4 <HAL_GPIO_Init+0x10>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	371c      	adds	r7, #28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48000800 	.word	0x48000800
 8000abc:	48000c00 	.word	0x48000c00
 8000ac0:	48001000 	.word	0x48001000
 8000ac4:	40010400 	.word	0x40010400

08000ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ae6:	887a      	ldrh	r2, [r7, #2]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f000 bef4 	b.w	80018fa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 816a 	beq.w	8000df6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b22:	4bb3      	ldr	r3, [pc, #716]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d00c      	beq.n	8000b48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b2e:	4bb0      	ldr	r3, [pc, #704]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d159      	bne.n	8000bee <HAL_RCC_OscConfig+0xf6>
 8000b3a:	4bad      	ldr	r3, [pc, #692]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b46:	d152      	bne.n	8000bee <HAL_RCC_OscConfig+0xf6>
 8000b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b4c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b54:	fa93 f3a3 	rbit	r3, r3
 8000b58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b60:	fab3 f383 	clz	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d102      	bne.n	8000b7a <HAL_RCC_OscConfig+0x82>
 8000b74:	4b9e      	ldr	r3, [pc, #632]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	e015      	b.n	8000ba6 <HAL_RCC_OscConfig+0xae>
 8000b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b7e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000b86:	fa93 f3a3 	rbit	r3, r3
 8000b8a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b92:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b96:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b9a:	fa93 f3a3 	rbit	r3, r3
 8000b9e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ba2:	4b93      	ldr	r3, [pc, #588]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000baa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000bae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bb2:	fa92 f2a2 	rbit	r2, r2
 8000bb6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000bba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	f042 0220 	orr.w	r2, r2, #32
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	f002 021f 	and.w	r2, r2, #31
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 810c 	beq.w	8000df4 <HAL_RCC_OscConfig+0x2fc>
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8106 	bne.w	8000df4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f000 be86 	b.w	80018fa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf8:	d106      	bne.n	8000c08 <HAL_RCC_OscConfig+0x110>
 8000bfa:	4b7d      	ldr	r3, [pc, #500]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a7c      	ldr	r2, [pc, #496]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e030      	b.n	8000c6a <HAL_RCC_OscConfig+0x172>
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x134>
 8000c12:	4b77      	ldr	r3, [pc, #476]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a76      	ldr	r2, [pc, #472]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	4b74      	ldr	r3, [pc, #464]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a73      	ldr	r2, [pc, #460]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e01e      	b.n	8000c6a <HAL_RCC_OscConfig+0x172>
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c36:	d10c      	bne.n	8000c52 <HAL_RCC_OscConfig+0x15a>
 8000c38:	4b6d      	ldr	r3, [pc, #436]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a6c      	ldr	r2, [pc, #432]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b6a      	ldr	r3, [pc, #424]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a69      	ldr	r2, [pc, #420]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e00b      	b.n	8000c6a <HAL_RCC_OscConfig+0x172>
 8000c52:	4b67      	ldr	r3, [pc, #412]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a66      	ldr	r2, [pc, #408]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	4b64      	ldr	r3, [pc, #400]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a63      	ldr	r2, [pc, #396]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c6a:	4b61      	ldr	r3, [pc, #388]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6e:	f023 020f 	bic.w	r2, r3, #15
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	495d      	ldr	r1, [pc, #372]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d059      	beq.n	8000d3c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fcb2 	bl	80005f0 <HAL_GetTick>
 8000c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c90:	e00a      	b.n	8000ca8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c92:	f7ff fcad 	bl	80005f0 <HAL_GetTick>
 8000c96:	4602      	mov	r2, r0
 8000c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b64      	cmp	r3, #100	; 0x64
 8000ca0:	d902      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	f000 be29 	b.w	80018fa <HAL_RCC_OscConfig+0xe02>
 8000ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000cb4:	fa93 f3a3 	rbit	r3, r3
 8000cb8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000cbc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc0:	fab3 f383 	clz	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d102      	bne.n	8000cda <HAL_RCC_OscConfig+0x1e2>
 8000cd4:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	e015      	b.n	8000d06 <HAL_RCC_OscConfig+0x20e>
 8000cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cde:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ce6:	fa93 f3a3 	rbit	r3, r3
 8000cea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000cf6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d02:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d0a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d0e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d12:	fa92 f2a2 	rbit	r2, r2
 8000d16:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d1a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	f042 0220 	orr.w	r2, r2, #32
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	f002 021f 	and.w	r2, r2, #31
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	4013      	ands	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0ab      	beq.n	8000c92 <HAL_RCC_OscConfig+0x19a>
 8000d3a:	e05c      	b.n	8000df6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fc58 	bl	80005f0 <HAL_GetTick>
 8000d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d44:	e00a      	b.n	8000d5c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d46:	f7ff fc53 	bl	80005f0 <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	; 0x64
 8000d54:	d902      	bls.n	8000d5c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	f000 bdcf 	b.w	80018fa <HAL_RCC_OscConfig+0xe02>
 8000d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000d70:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d74:	fab3 f383 	clz	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d102      	bne.n	8000d8e <HAL_RCC_OscConfig+0x296>
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x2c2>
 8000d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d92:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d96:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000daa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_RCC_OscConfig+0x2f8>)
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dbe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000dc2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000dc6:	fa92 f2a2 	rbit	r2, r2
 8000dca:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000dce:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	f042 0220 	orr.w	r2, r2, #32
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	f002 021f 	and.w	r2, r2, #31
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1ab      	bne.n	8000d46 <HAL_RCC_OscConfig+0x24e>
 8000dee:	e002      	b.n	8000df6 <HAL_RCC_OscConfig+0x2fe>
 8000df0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 816f 	beq.w	80010e4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e06:	4bd0      	ldr	r3, [pc, #832]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00b      	beq.n	8000e2a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e12:	4bcd      	ldr	r3, [pc, #820]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d16c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x400>
 8000e1e:	4bca      	ldr	r3, [pc, #808]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d166      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x400>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e30:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e3c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e40:	fab3 f383 	clz	r3, r3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d102      	bne.n	8000e5a <HAL_RCC_OscConfig+0x362>
 8000e54:	4bbc      	ldr	r3, [pc, #752]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	e013      	b.n	8000e82 <HAL_RCC_OscConfig+0x38a>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e60:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e64:	fa93 f3a3 	rbit	r3, r3
 8000e68:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e7e:	4bb2      	ldr	r3, [pc, #712]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	2202      	movs	r2, #2
 8000e84:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e88:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e8c:	fa92 f2a2 	rbit	r2, r2
 8000e90:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000e94:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e98:	fab2 f282 	clz	r2, r2
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f042 0220 	orr.w	r2, r2, #32
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	f002 021f 	and.w	r2, r2, #31
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d007      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x3cc>
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d002      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f000 bd1b 	b.w	80018fa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec4:	4ba0      	ldr	r3, [pc, #640]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	21f8      	movs	r1, #248	; 0xf8
 8000ed4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000edc:	fa91 f1a1 	rbit	r1, r1
 8000ee0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000ee4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000ee8:	fab1 f181 	clz	r1, r1
 8000eec:	b2c9      	uxtb	r1, r1
 8000eee:	408b      	lsls	r3, r1
 8000ef0:	4995      	ldr	r1, [pc, #596]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef6:	e0f5      	b.n	80010e4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8085 	beq.w	800100e <HAL_RCC_OscConfig+0x516>
 8000f04:	2301      	movs	r3, #1
 8000f06:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f1a:	fab3 f383 	clz	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fb5e 	bl	80005f0 <HAL_GetTick>
 8000f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fb59 	bl	80005f0 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d902      	bls.n	8000f50 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	f000 bcd5 	b.w	80018fa <HAL_RCC_OscConfig+0xe02>
 8000f50:	2302      	movs	r3, #2
 8000f52:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000f62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f66:	fab3 f383 	clz	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	095b      	lsrs	r3, r3, #5
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d102      	bne.n	8000f80 <HAL_RCC_OscConfig+0x488>
 8000f7a:	4b73      	ldr	r3, [pc, #460]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	e013      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b0>
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fa4:	4b68      	ldr	r3, [pc, #416]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	2202      	movs	r2, #2
 8000faa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000fae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fb2:	fa92 f2a2 	rbit	r2, r2
 8000fb6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000fba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000fbe:	fab2 f282 	clz	r2, r2
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	f042 0220 	orr.w	r2, r2, #32
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	f002 021f 	and.w	r2, r2, #31
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0af      	beq.n	8000f3a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	4b5b      	ldr	r3, [pc, #364]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	21f8      	movs	r1, #248	; 0xf8
 8000fea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ff2:	fa91 f1a1 	rbit	r1, r1
 8000ff6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000ffa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000ffe:	fab1 f181 	clz	r1, r1
 8001002:	b2c9      	uxtb	r1, r1
 8001004:	408b      	lsls	r3, r1
 8001006:	4950      	ldr	r1, [pc, #320]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
 800100c:	e06a      	b.n	80010e4 <HAL_RCC_OscConfig+0x5ec>
 800100e:	2301      	movs	r3, #1
 8001010:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001020:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800102e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	461a      	mov	r2, r3
 8001036:	2300      	movs	r3, #0
 8001038:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fad9 	bl	80005f0 <HAL_GetTick>
 800103e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001042:	e00a      	b.n	800105a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001044:	f7ff fad4 	bl	80005f0 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d902      	bls.n	800105a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	f000 bc50 	b.w	80018fa <HAL_RCC_OscConfig+0xe02>
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800106c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d102      	bne.n	800108a <HAL_RCC_OscConfig+0x592>
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	e013      	b.n	80010b2 <HAL_RCC_OscConfig+0x5ba>
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_RCC_OscConfig+0x650>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	2202      	movs	r2, #2
 80010b4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80010b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010bc:	fa92 f2a2 	rbit	r2, r2
 80010c0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80010c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010c8:	fab2 f282 	clz	r2, r2
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	f042 0220 	orr.w	r2, r2, #32
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	f002 021f 	and.w	r2, r2, #31
 80010d8:	2101      	movs	r1, #1
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1af      	bne.n	8001044 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80da 	beq.w	80012a8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d069      	beq.n	80011d2 <HAL_RCC_OscConfig+0x6da>
 80010fe:	2301      	movs	r3, #1
 8001100:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_RCC_OscConfig+0x654>)
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	461a      	mov	r2, r3
 8001124:	2301      	movs	r3, #1
 8001126:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001128:	f7ff fa62 	bl	80005f0 <HAL_GetTick>
 800112c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001130:	e00e      	b.n	8001150 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001132:	f7ff fa5d 	bl	80005f0 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d906      	bls.n	8001150 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e3d9      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	10908120 	.word	0x10908120
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001162:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001166:	2202      	movs	r2, #2
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	fa93 f2a3 	rbit	r2, r3
 8001174:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800117e:	2202      	movs	r2, #2
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	fa93 f2a3 	rbit	r2, r3
 800118c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001190:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	4ba5      	ldr	r3, [pc, #660]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001196:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800119a:	2102      	movs	r1, #2
 800119c:	6019      	str	r1, [r3, #0]
 800119e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	fa93 f1a3 	rbit	r1, r3
 80011a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011ac:	6019      	str	r1, [r3, #0]
  return result;
 80011ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	fab3 f383 	clz	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0b0      	beq.n	8001132 <HAL_RCC_OscConfig+0x63a>
 80011d0:	e06a      	b.n	80012a8 <HAL_RCC_OscConfig+0x7b0>
 80011d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	fa93 f2a3 	rbit	r2, r3
 80011e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011e8:	601a      	str	r2, [r3, #0]
  return result;
 80011ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b8c      	ldr	r3, [pc, #560]	; (800142c <HAL_RCC_OscConfig+0x934>)
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	461a      	mov	r2, r3
 8001200:	2300      	movs	r3, #0
 8001202:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff f9f4 	bl	80005f0 <HAL_GetTick>
 8001208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120c:	e009      	b.n	8001222 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120e:	f7ff f9ef 	bl	80005f0 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e36b      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
 8001222:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001226:	2202      	movs	r2, #2
 8001228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	fa93 f2a3 	rbit	r2, r3
 8001234:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800123e:	2202      	movs	r2, #2
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	fa93 f2a3 	rbit	r2, r3
 800124c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001256:	2202      	movs	r2, #2
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	fa93 f2a3 	rbit	r2, r3
 8001264:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001268:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 800126c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001272:	2102      	movs	r1, #2
 8001274:	6019      	str	r1, [r3, #0]
 8001276:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	fa93 f1a3 	rbit	r1, r3
 8001280:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001284:	6019      	str	r1, [r3, #0]
  return result;
 8001286:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2101      	movs	r1, #1
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1b2      	bne.n	800120e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8158 	beq.w	8001568 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012be:	4b5a      	ldr	r3, [pc, #360]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d112      	bne.n	80012f0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b57      	ldr	r3, [pc, #348]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a56      	ldr	r2, [pc, #344]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b54      	ldr	r3, [pc, #336]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <HAL_RCC_OscConfig+0x938>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d11a      	bne.n	8001332 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fc:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <HAL_RCC_OscConfig+0x938>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_RCC_OscConfig+0x938>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001308:	f7ff f972 	bl	80005f0 <HAL_GetTick>
 800130c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	e009      	b.n	8001326 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001312:	f7ff f96d 	bl	80005f0 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2e9      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001326:	4b42      	ldr	r3, [pc, #264]	; (8001430 <HAL_RCC_OscConfig+0x938>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0ef      	beq.n	8001312 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x852>
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4a39      	ldr	r2, [pc, #228]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6213      	str	r3, [r2, #32]
 8001348:	e02f      	b.n	80013aa <HAL_RCC_OscConfig+0x8b2>
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10c      	bne.n	800136e <HAL_RCC_OscConfig+0x876>
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a33      	ldr	r2, [pc, #204]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	4b31      	ldr	r3, [pc, #196]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4a30      	ldr	r2, [pc, #192]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	6213      	str	r3, [r2, #32]
 800136c:	e01d      	b.n	80013aa <HAL_RCC_OscConfig+0x8b2>
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0x89a>
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0x8b2>
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a24      	ldr	r2, [pc, #144]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a21      	ldr	r2, [pc, #132]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d06b      	beq.n	800148c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7ff f91c 	bl	80005f0 <HAL_GetTick>
 80013b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e00b      	b.n	80013d6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff f917 	bl	80005f0 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e291      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
 80013d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013da:	2202      	movs	r2, #2
 80013dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	fa93 f2a3 	rbit	r2, r3
 80013e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013f2:	2202      	movs	r2, #2
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fa93 f2a3 	rbit	r2, r3
 8001400:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001404:	601a      	str	r2, [r3, #0]
  return result;
 8001406:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800140a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d109      	bne.n	8001434 <HAL_RCC_OscConfig+0x93c>
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <HAL_RCC_OscConfig+0x930>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	e014      	b.n	8001450 <HAL_RCC_OscConfig+0x958>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	10908120 	.word	0x10908120
 8001430:	40007000 	.word	0x40007000
 8001434:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001438:	2202      	movs	r2, #2
 800143a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fa93 f2a3 	rbit	r2, r3
 8001446:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	4bbb      	ldr	r3, [pc, #748]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001454:	2102      	movs	r1, #2
 8001456:	6011      	str	r1, [r2, #0]
 8001458:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	fa92 f1a2 	rbit	r1, r2
 8001462:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001466:	6011      	str	r1, [r2, #0]
  return result;
 8001468:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	fab2 f282 	clz	r2, r2
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f002 021f 	and.w	r2, r2, #31
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d099      	beq.n	80013be <HAL_RCC_OscConfig+0x8c6>
 800148a:	e063      	b.n	8001554 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff f8b0 	bl	80005f0 <HAL_GetTick>
 8001490:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	e00b      	b.n	80014ae <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff f8ab 	bl	80005f0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e225      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
 80014ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014b2:	2202      	movs	r2, #2
 80014b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	fa93 f2a3 	rbit	r2, r3
 80014c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014ca:	2202      	movs	r2, #2
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014dc:	601a      	str	r2, [r3, #0]
  return result;
 80014de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_OscConfig+0xa06>
 80014f8:	4b90      	ldr	r3, [pc, #576]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	e00d      	b.n	800151a <HAL_RCC_OscConfig+0xa22>
 80014fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001502:	2202      	movs	r2, #2
 8001504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa93 f2a3 	rbit	r2, r3
 8001510:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800151e:	2102      	movs	r1, #2
 8001520:	6011      	str	r1, [r2, #0]
 8001522:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	fa92 f1a2 	rbit	r1, r2
 800152c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001530:	6011      	str	r1, [r2, #0]
  return result;
 8001532:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	fab2 f282 	clz	r2, r2
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	f002 021f 	and.w	r2, r2, #31
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1a0      	bne.n	8001496 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001554:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155c:	4b77      	ldr	r3, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	4a76      	ldr	r2, [pc, #472]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 8001562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001566:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 81c2 	beq.w	80018f8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	4b71      	ldr	r3, [pc, #452]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	f000 819c 	beq.w	80018ba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b02      	cmp	r3, #2
 800158a:	f040 8114 	bne.w	80017b6 <HAL_RCC_OscConfig+0xcbe>
 800158e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001592:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015a6:	601a      	str	r2, [r3, #0]
  return result;
 80015a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	461a      	mov	r2, r3
 80015c0:	2300      	movs	r3, #0
 80015c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff f814 	bl	80005f0 <HAL_GetTick>
 80015c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015cc:	e009      	b.n	80015e2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff f80f 	bl	80005f0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e18b      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
 80015e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015fa:	601a      	str	r2, [r3, #0]
  return result;
 80015fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001600:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	095b      	lsrs	r3, r3, #5
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d102      	bne.n	800161c <HAL_RCC_OscConfig+0xb24>
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	e01b      	b.n	8001654 <HAL_RCC_OscConfig+0xb5c>
 800161c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001620:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f2a3 	rbit	r2, r3
 8001630:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800163a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fa93 f2a3 	rbit	r2, r3
 800164a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	4b3a      	ldr	r3, [pc, #232]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001658:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800165c:	6011      	str	r1, [r2, #0]
 800165e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	fa92 f1a2 	rbit	r1, r2
 8001668:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800166c:	6011      	str	r1, [r2, #0]
  return result;
 800166e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	fab2 f282 	clz	r2, r2
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	f042 0220 	orr.w	r2, r2, #32
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	f002 021f 	and.w	r2, r2, #31
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d19e      	bne.n	80015ce <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	4925      	ldr	r1, [pc, #148]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
 80016ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fa93 f2a3 	rbit	r2, r3
 80016c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016c4:	601a      	str	r2, [r3, #0]
  return result;
 80016c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016ca:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	461a      	mov	r2, r3
 80016de:	2301      	movs	r3, #1
 80016e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7fe ff85 	bl	80005f0 <HAL_GetTick>
 80016e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ea:	e009      	b.n	8001700 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7fe ff80 	bl	80005f0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0fc      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
 8001700:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001718:	601a      	str	r2, [r3, #0]
  return result;
 800171a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800171e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0xc48>
 8001734:	4b01      	ldr	r3, [pc, #4]	; (800173c <HAL_RCC_OscConfig+0xc44>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e01e      	b.n	8001778 <HAL_RCC_OscConfig+0xc80>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	fa93 f2a3 	rbit	r2, r3
 8001754:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800175e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_OscConfig+0xe0c>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800177c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001780:	6011      	str	r1, [r2, #0]
 8001782:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	fa92 f1a2 	rbit	r1, r2
 800178c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001790:	6011      	str	r1, [r2, #0]
  return result;
 8001792:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	fab2 f282 	clz	r2, r2
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	f042 0220 	orr.w	r2, r2, #32
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f002 021f 	and.w	r2, r2, #31
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f202 	lsl.w	r2, r1, r2
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d09b      	beq.n	80016ec <HAL_RCC_OscConfig+0xbf4>
 80017b4:	e0a0      	b.n	80018f8 <HAL_RCC_OscConfig+0xe00>
 80017b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	601a      	str	r2, [r3, #0]
  return result;
 80017d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	461a      	mov	r2, r3
 80017e8:	2300      	movs	r3, #0
 80017ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7fe ff00 	bl	80005f0 <HAL_GetTick>
 80017f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f4:	e009      	b.n	800180a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7fe fefb 	bl	80005f0 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e077      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
 800180a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	601a      	str	r2, [r3, #0]
  return result;
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_RCC_OscConfig+0xd4c>
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_RCC_OscConfig+0xe0c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	e01b      	b.n	800187c <HAL_RCC_OscConfig+0xd84>
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fa93 f2a3 	rbit	r2, r3
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_OscConfig+0xe0c>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	f107 0210 	add.w	r2, r7, #16
 8001880:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001884:	6011      	str	r1, [r2, #0]
 8001886:	f107 0210 	add.w	r2, r7, #16
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	fa92 f1a2 	rbit	r1, r2
 8001890:	f107 020c 	add.w	r2, r7, #12
 8001894:	6011      	str	r1, [r2, #0]
  return result;
 8001896:	f107 020c 	add.w	r2, r7, #12
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	fab2 f282 	clz	r2, r2
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	f042 0220 	orr.w	r2, r2, #32
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	f002 021f 	and.w	r2, r2, #31
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f202 	lsl.w	r2, r1, r2
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d19e      	bne.n	80017f6 <HAL_RCC_OscConfig+0xcfe>
 80018b8:	e01e      	b.n	80018f8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e018      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_RCC_OscConfig+0xe0c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d108      	bne.n	80018f4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80018e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b09e      	sub	sp, #120	; 0x78
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e162      	b.n	8001be6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b90      	ldr	r3, [pc, #576]	; (8001b64 <HAL_RCC_ClockConfig+0x25c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d910      	bls.n	8001950 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b8d      	ldr	r3, [pc, #564]	; (8001b64 <HAL_RCC_ClockConfig+0x25c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 0207 	bic.w	r2, r3, #7
 8001936:	498b      	ldr	r1, [pc, #556]	; (8001b64 <HAL_RCC_ClockConfig+0x25c>)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <HAL_RCC_ClockConfig+0x25c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e14a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b82      	ldr	r3, [pc, #520]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	497f      	ldr	r1, [pc, #508]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80dc 	beq.w	8001b34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d13c      	bne.n	80019fe <HAL_RCC_ClockConfig+0xf6>
 8001984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001988:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_ClockConfig+0xa6>
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e00f      	b.n	80019ce <HAL_RCC_ClockConfig+0xc6>
 80019ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	667b      	str	r3, [r7, #100]	; 0x64
 80019bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c0:	663b      	str	r3, [r7, #96]	; 0x60
 80019c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80019d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019d6:	fa92 f2a2 	rbit	r2, r2
 80019da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80019dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019de:	fab2 f282 	clz	r2, r2
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f042 0220 	orr.w	r2, r2, #32
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f002 021f 	and.w	r2, r2, #31
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d17b      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0f3      	b.n	8001be6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d13c      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x178>
 8001a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x128>
 8001a2a:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	e00f      	b.n	8001a50 <HAL_RCC_ClockConfig+0x148>
 8001a30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
 8001a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4c:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a54:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a58:	fa92 f2a2 	rbit	r2, r2
 8001a5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d13a      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b2      	b.n	8001be6 <HAL_RCC_ClockConfig+0x2de>
 8001a80:	2302      	movs	r3, #2
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	095b      	lsrs	r3, r3, #5
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x1a0>
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e00d      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1bc>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	61ba      	str	r2, [r7, #24]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	fa92 f2a2 	rbit	r2, r2
 8001ace:	617a      	str	r2, [r7, #20]
  return result;
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	fab2 f282 	clz	r2, r2
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f042 0220 	orr.w	r2, r2, #32
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f002 021f 	and.w	r2, r2, #31
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e079      	b.n	8001be6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f023 0203 	bic.w	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	491a      	ldr	r1, [pc, #104]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b04:	f7fe fd74 	bl	80005f0 <HAL_GetTick>
 8001b08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7fe fd70 	bl	80005f0 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e061      	b.n	8001be6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 020c 	and.w	r2, r3, #12
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1eb      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x25c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d214      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_RCC_ClockConfig+0x25c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0207 	bic.w	r2, r3, #7
 8001b4a:	4906      	ldr	r1, [pc, #24]	; (8001b64 <HAL_RCC_ClockConfig+0x25c>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <HAL_RCC_ClockConfig+0x25c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e040      	b.n	8001be6 <HAL_RCC_ClockConfig+0x2de>
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	491a      	ldr	r1, [pc, #104]	; (8001bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4912      	ldr	r1, [pc, #72]	; (8001bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001baa:	f000 f829 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bae:	4601      	mov	r1, r0
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb8:	22f0      	movs	r2, #240	; 0xf0
 8001bba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	fa92 f2a2 	rbit	r2, r2
 8001bc2:	60fa      	str	r2, [r7, #12]
  return result;
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	fab2 f282 	clz	r2, r2
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	40d3      	lsrs	r3, r2
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x2ec>)
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_RCC_ClockConfig+0x2f0>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_RCC_ClockConfig+0x2f4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fcc2 	bl	8000568 <HAL_InitTick>
  
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3778      	adds	r7, #120	; 0x78
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08001e68 	.word	0x08001e68
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b08b      	sub	sp, #44	; 0x2c
 8001c04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d002      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x30>
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x36>
 8001c2e:	e03c      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c32:	623b      	str	r3, [r7, #32]
      break;
 8001c34:	e03c      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c3c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c40:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	fa92 f2a2 	rbit	r2, r2
 8001c48:	607a      	str	r2, [r7, #4]
  return result;
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	fab2 f282 	clz	r2, r2
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	40d3      	lsrs	r3, r2
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	220f      	movs	r2, #15
 8001c64:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	fa92 f2a2 	rbit	r2, r2
 8001c6c:	60fa      	str	r2, [r7, #12]
  return result;
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	40d3      	lsrs	r3, r2
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	e004      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	623b      	str	r3, [r7, #32]
      break;
 8001ca8:	e002      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cac:	623b      	str	r3, [r7, #32]
      break;
 8001cae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	372c      	adds	r7, #44	; 0x2c
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	08001e78 	.word	0x08001e78
 8001ccc:	08001e88 	.word	0x08001e88
 8001cd0:	003d0900 	.word	0x003d0900

08001cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e084      	b.n	8001df0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7fe fb67 	bl	80003d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d26:	d902      	bls.n	8001d2e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e002      	b.n	8001d34 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001d3c:	d007      	beq.n	8001d4e <HAL_SPI_Init+0x7a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d46:	d002      	beq.n	8001d4e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10b      	bne.n	8001d6e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d5e:	d903      	bls.n	8001d68 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30
 8001d66:	e002      	b.n	8001d6e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	ea42 0103 	orr.w	r1, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f003 0204 	and.w	r2, r3, #4
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	ea42 0103 	orr.w	r1, r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <__libc_init_array>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	4e0d      	ldr	r6, [pc, #52]	; (8001e30 <__libc_init_array+0x38>)
 8001dfc:	4c0d      	ldr	r4, [pc, #52]	; (8001e34 <__libc_init_array+0x3c>)
 8001dfe:	1ba4      	subs	r4, r4, r6
 8001e00:	10a4      	asrs	r4, r4, #2
 8001e02:	2500      	movs	r5, #0
 8001e04:	42a5      	cmp	r5, r4
 8001e06:	d109      	bne.n	8001e1c <__libc_init_array+0x24>
 8001e08:	4e0b      	ldr	r6, [pc, #44]	; (8001e38 <__libc_init_array+0x40>)
 8001e0a:	4c0c      	ldr	r4, [pc, #48]	; (8001e3c <__libc_init_array+0x44>)
 8001e0c:	f000 f820 	bl	8001e50 <_init>
 8001e10:	1ba4      	subs	r4, r4, r6
 8001e12:	10a4      	asrs	r4, r4, #2
 8001e14:	2500      	movs	r5, #0
 8001e16:	42a5      	cmp	r5, r4
 8001e18:	d105      	bne.n	8001e26 <__libc_init_array+0x2e>
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e20:	4798      	blx	r3
 8001e22:	3501      	adds	r5, #1
 8001e24:	e7ee      	b.n	8001e04 <__libc_init_array+0xc>
 8001e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e2a:	4798      	blx	r3
 8001e2c:	3501      	adds	r5, #1
 8001e2e:	e7f2      	b.n	8001e16 <__libc_init_array+0x1e>
 8001e30:	08001e98 	.word	0x08001e98
 8001e34:	08001e98 	.word	0x08001e98
 8001e38:	08001e98 	.word	0x08001e98
 8001e3c:	08001e9c 	.word	0x08001e9c

08001e40 <memset>:
 8001e40:	4402      	add	r2, r0
 8001e42:	4603      	mov	r3, r0
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d100      	bne.n	8001e4a <memset+0xa>
 8001e48:	4770      	bx	lr
 8001e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e4e:	e7f9      	b.n	8001e44 <memset+0x4>

08001e50 <_init>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	bf00      	nop
 8001e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e56:	bc08      	pop	{r3}
 8001e58:	469e      	mov	lr, r3
 8001e5a:	4770      	bx	lr

08001e5c <_fini>:
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5e:	bf00      	nop
 8001e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e62:	bc08      	pop	{r3}
 8001e64:	469e      	mov	lr, r3
 8001e66:	4770      	bx	lr
