
F303CC_SPI_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f1c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d4  080030d4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080030d4  080030d4  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030d4  080030d4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080030dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000007c  08003158  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003158  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dfc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001634  00000000  00000000  00028ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  0002a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000578  00000000  00000000  0002ab20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000196fc  00000000  00000000  0002b098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069d7  00000000  00000000  00044794  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091d06  00000000  00000000  0004b16b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dce71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a9c  00000000  00000000  000dceec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800308c 	.word	0x0800308c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800308c 	.word	0x0800308c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab8:	f000 faf4 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abc:	f000 f807 	bl	8000ace <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac0:	f000 f888 	bl	8000bd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ac4:	f000 f848 	bl	8000b58 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 8000ac8:	f000 fa86 	bl	8000fd8 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <main+0x18>

08000ace <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b090      	sub	sp, #64	; 0x40
 8000ad2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	2228      	movs	r2, #40	; 0x28
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fa17 	bl	8002f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b02:	2302      	movs	r3, #2
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fdc4 	bl	80016a4 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b22:	f000 f8a1 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fcb7 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b4c:	f000 f88c 	bl	8000c68 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3740      	adds	r7, #64	; 0x40
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <MX_SPI1_Init+0x78>)
 8000b60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b8e:	2208      	movs	r2, #8
 8000b90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000bb8:	f001 fe62 	bl	8002880 <HAL_SPI_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bc2:	f000 f851 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000a4 	.word	0x200000a4
 8000bd0:	40013000 	.word	0x40013000

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_GPIO_Init+0x8c>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2101      	movs	r1, #1
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <MX_GPIO_Init+0x90>)
 8000c38:	f000 fd1c 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_GPIO_Init+0x90>)
 8000c54:	f000 fb94 	bl	8001380 <HAL_GPIO_Init>

}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000
 8000c64:	48000400 	.word	0x48000400

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <mcp4922_new>:
 * @param  v_ref_A: Reference voltage channel A (mV)
 * @param  v_ref_B: Reference voltage channel B (mV)
 * @param  buffered: 1: Buffered output	0: Unbuffered output
 * @retval mcp4922_t variable corresponding to the mcp4299 module
 */
mcp4922_t* mcp4922_new(SPI_HandleTypeDef *hspi, GPIO_TypeDef* port_CS, uint16_t pin_CS, uint16_t v_ref_A, uint16_t v_ref_B, uint8_t buffered){
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b08a      	sub	sp, #40	; 0x28
 8000c7a:	af04      	add	r7, sp, #16
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	4611      	mov	r1, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	460b      	mov	r3, r1
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	80bb      	strh	r3, [r7, #4]
	mcp4922_t* mcp4922 = malloc(sizeof(*mcp4922));
 8000c8c:	2010      	movs	r0, #16
 8000c8e:	f002 f937 	bl	8002f00 <malloc>
 8000c92:	4603      	mov	r3, r0
 8000c94:	617b      	str	r3, [r7, #20]
	mcp4922_init(mcp4922, hspi, port_CS, pin_CS, v_ref_A, v_ref_B, buffered);
 8000c96:	88fa      	ldrh	r2, [r7, #6]
 8000c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	8c3b      	ldrh	r3, [r7, #32]
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	6978      	ldr	r0, [r7, #20]
 8000cae:	f000 f805 	bl	8000cbc <mcp4922_init>
	return mcp4922;
 8000cb2:	697b      	ldr	r3, [r7, #20]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <mcp4922_init>:
 * @param  v_ref_A: Reference voltage channel A (mV)
 * @param  v_ref_B: Reference voltage channel B (mV)
 * @param  buffered: 1: Buffered output	0: Unbuffered output
 * @retval None
 */
void mcp4922_init(mcp4922_t *mcp4922, SPI_HandleTypeDef *hspi, GPIO_TypeDef* port_CS, uint16_t pin_CS, uint16_t v_ref_A, uint16_t v_ref_B, uint8_t buffered){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	807b      	strh	r3, [r7, #2]
	mcp4922->hspi = hspi;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	601a      	str	r2, [r3, #0]
	mcp4922->port_CS = port_CS;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	605a      	str	r2, [r3, #4]
	mcp4922->pin_CS = pin_CS;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	887a      	ldrh	r2, [r7, #2]
 8000cda:	811a      	strh	r2, [r3, #8]
	mcp4922->v_ref[0] = v_ref_A;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	8b3a      	ldrh	r2, [r7, #24]
 8000ce0:	815a      	strh	r2, [r3, #10]
	mcp4922->v_ref[1] = v_ref_B;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	8bba      	ldrh	r2, [r7, #28]
 8000ce6:	819a      	strh	r2, [r3, #12]
	mcp4922->buffered = buffered;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cee:	739a      	strb	r2, [r3, #14]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	0000      	movs	r0, r0
	...

08000d00 <mcp4922_write>:
 * @brief  Writes a value on the mcp4922 DAC module
 * @param  voltage: Voltage to be output by the DAC (mV)
 * @param  channel: 0: Channel A	1: Channel B
 * @retval None
 */
void mcp4922_write(mcp4922_t *mcp4922, double voltage, uint8_t channel){
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	ed87 0b00 	vstr	d0, [r7]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	72fb      	strb	r3, [r7, #11]
	uint16_t data;
	if (voltage > mcp4922->v_ref[channel]){
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	3304      	adds	r3, #4
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	885b      	ldrh	r3, [r3, #2]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fba5 	bl	800046c <__aeabi_i2d>
 8000d22:	4603      	mov	r3, r0
 8000d24:	460c      	mov	r4, r1
 8000d26:	461a      	mov	r2, r3
 8000d28:	4623      	mov	r3, r4
 8000d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d2e:	f7ff fe97 	bl	8000a60 <__aeabi_dcmpgt>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <mcp4922_write+0x40>
		data = 4095;
 8000d38:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d3e:	e039      	b.n	8000db4 <mcp4922_write+0xb4>
	} else if (voltage < 0){
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d4c:	f7ff fe6a 	bl	8000a24 <__aeabi_dcmplt>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <mcp4922_write+0x5c>
		data = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d5a:	e02b      	b.n	8000db4 <mcp4922_write+0xb4>
	} else {
		double dac_value = round(voltage*4095/mcp4922->v_ref[channel]);
 8000d5c:	a330      	add	r3, pc, #192	; (adr r3, 8000e20 <mcp4922_write+0x120>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d66:	f7ff fbeb 	bl	8000540 <__aeabi_dmul>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	4625      	mov	r5, r4
 8000d70:	461c      	mov	r4, r3
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	3304      	adds	r3, #4
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	885b      	ldrh	r3, [r3, #2]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fb74 	bl	800046c <__aeabi_i2d>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	f7ff fd02 	bl	8000794 <__aeabi_ddiv>
 8000d90:	4603      	mov	r3, r0
 8000d92:	460c      	mov	r4, r1
 8000d94:	ec44 3b17 	vmov	d7, r3, r4
 8000d98:	eeb0 0a47 	vmov.f32	s0, s14
 8000d9c:	eef0 0a67 	vmov.f32	s1, s15
 8000da0:	f002 f92a 	bl	8002ff8 <round>
 8000da4:	ed87 0b06 	vstr	d0, [r7, #24]
		data = dac_value;
 8000da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000dac:	f7ff fe62 	bl	8000a74 <__aeabi_d2uiz>
 8000db0:	4603      	mov	r3, r0
 8000db2:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	uint8_t command[2];
	command[0] = 0b00110000 | (channel<<7) | ((mcp4922->buffered)<<6) | (data>>8);
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	01db      	lsls	r3, r3, #7
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	7b9b      	ldrb	r3, [r3, #14]
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b25a      	sxtb	r2, r3
 8000dcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	753b      	strb	r3, [r7, #20]
	command[1] = (uint8_t)data;
 8000ddc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_WritePin(mcp4922->port_CS, mcp4922->pin_CS, GPIO_PIN_RESET);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6858      	ldr	r0, [r3, #4]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	891b      	ldrh	r3, [r3, #8]
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	f000 fc41 	bl	8001674 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(mcp4922->hspi, command, 2, 10);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	f107 0114 	add.w	r1, r7, #20
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	f001 fdd1 	bl	80029a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(mcp4922->port_CS, mcp4922->pin_CS, GPIO_PIN_SET);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6858      	ldr	r0, [r3, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	891b      	ldrh	r3, [r3, #8]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f000 fc31 	bl	8001674 <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	f3af 8000 	nop.w
 8000e20:	00000000 	.word	0x00000000
 8000e24:	40affe00 	.word	0x40affe00

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_MspInit+0x44>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_MspInit+0x44>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x44>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x44>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_SPI_MspInit+0x7c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d128      	bne.n	8000ee4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ec2:	23e0      	movs	r3, #224	; 0xe0
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f000 fa4e 	bl	8001380 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f8f2 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x50>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x16>
		heap_end = &end;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <_sbrk+0x50>)
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <_sbrk+0x54>)
 8000f64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <_sbrk+0x50>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <_sbrk+0x50>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	466a      	mov	r2, sp
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d907      	bls.n	8000f8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f7a:	f001 ff97 	bl	8002eac <__errno>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	230c      	movs	r3, #12
 8000f82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	e006      	b.n	8000f98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <_sbrk+0x50>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <_sbrk+0x50>)
 8000f94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000098 	.word	0x20000098
 8000fa4:	20000118 	.word	0x20000118

08000fa8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <SystemInit+0x28>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <SystemInit+0x28>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SystemInit+0x28>)
 8000fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	00000000 	.word	0x00000000

08000fd8 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af02      	add	r7, sp, #8
	/* MAIN CODE */
	dac_1 = mcp4922_new(spi, PORT_CS, PIN_CS, 3300, 3300, 1);
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <main_s+0x68>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <main_s+0x6c>)
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <main_s+0x70>)
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000ff8:	f7ff fe3d 	bl	8000c76 <mcp4922_new>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <main_s+0x74>)
 8001000:	601a      	str	r2, [r3, #0]
//	mcp4922_write(dac_1, 1500, 0);

	while(1){
		/* WHILE CODE */
		mcp4922_write(dac_1, 1500, 0);
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <main_s+0x74>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2100      	movs	r1, #0
 8001008:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001030 <main_s+0x58>
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe77 	bl	8000d00 <mcp4922_write>
		HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 f8ac 	bl	8001170 <HAL_Delay>
		mcp4922_write(dac_1, 0, 0);
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <main_s+0x74>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2100      	movs	r1, #0
 800101e:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001038 <main_s+0x60>
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe6c 	bl	8000d00 <mcp4922_write>
		HAL_Delay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f000 f8a1 	bl	8001170 <HAL_Delay>
		mcp4922_write(dac_1, 1500, 0);
 800102e:	e7e8      	b.n	8001002 <main_s+0x2a>
 8001030:	00000000 	.word	0x00000000
 8001034:	40977000 	.word	0x40977000
	...
 8001040:	20000004 	.word	0x20000004
 8001044:	20000008 	.word	0x20000008
 8001048:	2000000c 	.word	0x2000000c
 800104c:	20000108 	.word	0x20000108

08001050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001054:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001056:	e003      	b.n	8001060 <LoopCopyDataInit>

08001058 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800105a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800105c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800105e:	3104      	adds	r1, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001064:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001066:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001068:	d3f6      	bcc.n	8001058 <CopyDataInit>
	ldr	r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopForever+0x12>)
	b	LoopFillZerobss
 800106c:	e002      	b.n	8001074 <LoopFillZerobss>

0800106e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800106e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001070:	f842 3b04 	str.w	r3, [r2], #4

08001074 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <LoopForever+0x16>)
	cmp	r2, r3
 8001076:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001078:	d3f9      	bcc.n	800106e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107a:	f7ff ff95 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f001 ff1b 	bl	8002eb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001082:	f7ff fd17 	bl	8000ab4 <main>

08001086 <LoopForever>:

LoopForever:
    b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001088:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800108c:	080030dc 	.word	0x080030dc
	ldr	r0, =_sdata
 8001090:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001094:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8001098:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 800109c:	20000114 	.word	0x20000114

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_Init+0x28>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x28>)
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 f92f 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f808 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c0:	f7ff feb2 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f939 	bl	8001366 <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f90f 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000000 	.word	0x20000000
 8001128:	20000014 	.word	0x20000014
 800112c:	20000010 	.word	0x20000010

08001130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000014 	.word	0x20000014
 8001154:	2000010c 	.word	0x2000010c

08001158 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;  
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000010c 	.word	0x2000010c

08001170 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_Delay+0x40>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000014 	.word	0x20000014

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff47 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff5c 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff8e 	bl	800126c <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffb0 	bl	80012d4 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e154      	b.n	800163a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8146 	beq.w	8001634 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x38>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b12      	cmp	r3, #18
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00b      	beq.n	8001454 <HAL_GPIO_Init+0xd4>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001448:	2b11      	cmp	r3, #17
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 0201 	and.w	r2, r3, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80a0 	beq.w	8001634 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	4b58      	ldr	r3, [pc, #352]	; (8001658 <HAL_GPIO_Init+0x2d8>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a57      	ldr	r2, [pc, #348]	; (8001658 <HAL_GPIO_Init+0x2d8>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b55      	ldr	r3, [pc, #340]	; (8001658 <HAL_GPIO_Init+0x2d8>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800150c:	4a53      	ldr	r2, [pc, #332]	; (800165c <HAL_GPIO_Init+0x2dc>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001536:	d019      	beq.n	800156c <HAL_GPIO_Init+0x1ec>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a49      	ldr	r2, [pc, #292]	; (8001660 <HAL_GPIO_Init+0x2e0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d013      	beq.n	8001568 <HAL_GPIO_Init+0x1e8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a48      	ldr	r2, [pc, #288]	; (8001664 <HAL_GPIO_Init+0x2e4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00d      	beq.n	8001564 <HAL_GPIO_Init+0x1e4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a47      	ldr	r2, [pc, #284]	; (8001668 <HAL_GPIO_Init+0x2e8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x1e0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a46      	ldr	r2, [pc, #280]	; (800166c <HAL_GPIO_Init+0x2ec>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_GPIO_Init+0x1dc>
 8001558:	2304      	movs	r3, #4
 800155a:	e008      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 800155c:	2305      	movs	r3, #5
 800155e:	e006      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 8001560:	2303      	movs	r3, #3
 8001562:	e004      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 8001564:	2302      	movs	r3, #2
 8001566:	e002      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 800156c:	2300      	movs	r3, #0
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	f002 0203 	and.w	r2, r2, #3
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	4093      	lsls	r3, r2
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800157e:	4937      	ldr	r1, [pc, #220]	; (800165c <HAL_GPIO_Init+0x2dc>)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158c:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015b0:	4a2f      	ldr	r2, [pc, #188]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015da:	4a25      	ldr	r2, [pc, #148]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	f47f aea3 	bne.w	8001390 <HAL_GPIO_Init+0x10>
  }
}
 800164a:	bf00      	nop
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000
 8001660:	48000400 	.word	0x48000400
 8001664:	48000800 	.word	0x48000800
 8001668:	48000c00 	.word	0x48000c00
 800166c:	48001000 	.word	0x48001000
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001690:	e002      	b.n	8001698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	f000 bef4 	b.w	80024a6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 816a 	beq.w	80019a2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ce:	4bb3      	ldr	r3, [pc, #716]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d00c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016da:	4bb0      	ldr	r3, [pc, #704]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d159      	bne.n	800179a <HAL_RCC_OscConfig+0xf6>
 80016e6:	4bad      	ldr	r3, [pc, #692]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f2:	d152      	bne.n	800179a <HAL_RCC_OscConfig+0xf6>
 80016f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001708:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <HAL_RCC_OscConfig+0x82>
 8001720:	4b9e      	ldr	r3, [pc, #632]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0xae>
 8001726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800173a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001742:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800174e:	4b93      	ldr	r3, [pc, #588]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001756:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800175a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800175e:	fa92 f2a2 	rbit	r2, r2
 8001762:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001766:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	f002 021f 	and.w	r2, r2, #31
 800177a:	2101      	movs	r1, #1
 800177c:	fa01 f202 	lsl.w	r2, r1, r2
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 810c 	beq.w	80019a0 <HAL_RCC_OscConfig+0x2fc>
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 8106 	bne.w	80019a0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	f000 be86 	b.w	80024a6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x110>
 80017a6:	4b7d      	ldr	r3, [pc, #500]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7c      	ldr	r2, [pc, #496]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e030      	b.n	8001816 <HAL_RCC_OscConfig+0x172>
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x134>
 80017be:	4b77      	ldr	r3, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a76      	ldr	r2, [pc, #472]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b74      	ldr	r3, [pc, #464]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a73      	ldr	r2, [pc, #460]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e01e      	b.n	8001816 <HAL_RCC_OscConfig+0x172>
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x15a>
 80017e4:	4b6d      	ldr	r3, [pc, #436]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a6c      	ldr	r2, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a69      	ldr	r2, [pc, #420]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0x172>
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a66      	ldr	r2, [pc, #408]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a63      	ldr	r2, [pc, #396]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001816:	4b61      	ldr	r3, [pc, #388]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f023 020f 	bic.w	r2, r3, #15
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	495d      	ldr	r1, [pc, #372]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001826:	4313      	orrs	r3, r2
 8001828:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d059      	beq.n	80018e8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fc90 	bl	8001158 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183e:	f7ff fc8b 	bl	8001158 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d902      	bls.n	8001854 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	f000 be29 	b.w	80024a6 <HAL_RCC_OscConfig+0xe02>
 8001854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001858:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001868:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x1e2>
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x20e>
 8001886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018a2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018ba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018be:	fa92 f2a2 	rbit	r2, r2
 80018c2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018c6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018ca:	fab2 f282 	clz	r2, r2
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f042 0220 	orr.w	r2, r2, #32
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	f002 021f 	and.w	r2, r2, #31
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ab      	beq.n	800183e <HAL_RCC_OscConfig+0x19a>
 80018e6:	e05c      	b.n	80019a2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fc36 	bl	8001158 <HAL_GetTick>
 80018ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f2:	f7ff fc31 	bl	8001158 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d902      	bls.n	8001908 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	f000 bdcf 	b.w	80024a6 <HAL_RCC_OscConfig+0xe02>
 8001908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800191c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d102      	bne.n	800193a <HAL_RCC_OscConfig+0x296>
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x2c2>
 800193a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800194e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001952:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001956:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_RCC_OscConfig+0x2f8>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800196a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800196e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001972:	fa92 f2a2 	rbit	r2, r2
 8001976:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800197a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800197e:	fab2 f282 	clz	r2, r2
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f042 0220 	orr.w	r2, r2, #32
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f002 021f 	and.w	r2, r2, #31
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ab      	bne.n	80018f2 <HAL_RCC_OscConfig+0x24e>
 800199a:	e002      	b.n	80019a2 <HAL_RCC_OscConfig+0x2fe>
 800199c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 816f 	beq.w	8001c90 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019b2:	4bd0      	ldr	r3, [pc, #832]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019be:	4bcd      	ldr	r3, [pc, #820]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d16c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x400>
 80019ca:	4bca      	ldr	r3, [pc, #808]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d166      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x400>
 80019d6:	2302      	movs	r3, #2
 80019d8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0x362>
 8001a00:	4bbc      	ldr	r3, [pc, #752]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e013      	b.n	8001a2e <HAL_RCC_OscConfig+0x38a>
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a2a:	4bb2      	ldr	r3, [pc, #712]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a34:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a38:	fa92 f2a2 	rbit	r2, r2
 8001a3c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a40:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a44:	fab2 f282 	clz	r2, r2
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f042 0220 	orr.w	r2, r2, #32
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f002 021f 	and.w	r2, r2, #31
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <HAL_RCC_OscConfig+0x3cc>
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f000 bd1b 	b.w	80024a6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4ba0      	ldr	r3, [pc, #640]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	21f8      	movs	r1, #248	; 0xf8
 8001a80:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a88:	fa91 f1a1 	rbit	r1, r1
 8001a8c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a90:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a94:	fab1 f181 	clz	r1, r1
 8001a98:	b2c9      	uxtb	r1, r1
 8001a9a:	408b      	lsls	r3, r1
 8001a9c:	4995      	ldr	r1, [pc, #596]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e0f5      	b.n	8001c90 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8085 	beq.w	8001bba <HAL_RCC_OscConfig+0x516>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ac2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2301      	movs	r3, #1
 8001ada:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fb3c 	bl	8001158 <HAL_GetTick>
 8001ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fb37 	bl	8001158 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d902      	bls.n	8001afc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	f000 bcd5 	b.w	80024a6 <HAL_RCC_OscConfig+0xe02>
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d102      	bne.n	8001b2c <HAL_RCC_OscConfig+0x488>
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e013      	b.n	8001b54 <HAL_RCC_OscConfig+0x4b0>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b3e:	2302      	movs	r3, #2
 8001b40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	2202      	movs	r2, #2
 8001b56:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b5e:	fa92 f2a2 	rbit	r2, r2
 8001b62:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b66:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b6a:	fab2 f282 	clz	r2, r2
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f042 0220 	orr.w	r2, r2, #32
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f002 021f 	and.w	r2, r2, #31
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0af      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	4b5b      	ldr	r3, [pc, #364]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	21f8      	movs	r1, #248	; 0xf8
 8001b96:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b9e:	fa91 f1a1 	rbit	r1, r1
 8001ba2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ba6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001baa:	fab1 f181 	clz	r1, r1
 8001bae:	b2c9      	uxtb	r1, r1
 8001bb0:	408b      	lsls	r3, r1
 8001bb2:	4950      	ldr	r1, [pc, #320]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e06a      	b.n	8001c90 <HAL_RCC_OscConfig+0x5ec>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001bcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fab7 	bl	8001158 <HAL_GetTick>
 8001bea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fab2 	bl	8001158 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d902      	bls.n	8001c06 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	f000 bc50 	b.w	80024a6 <HAL_RCC_OscConfig+0xe02>
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_OscConfig+0x592>
 8001c30:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	e013      	b.n	8001c5e <HAL_RCC_OscConfig+0x5ba>
 8001c36:	2302      	movs	r3, #2
 8001c38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x650>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c64:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c68:	fa92 f2a2 	rbit	r2, r2
 8001c6c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c70:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c74:	fab2 f282 	clz	r2, r2
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f042 0220 	orr.w	r2, r2, #32
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f002 021f 	and.w	r2, r2, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1af      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80da 	beq.w	8001e54 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d069      	beq.n	8001d7e <HAL_RCC_OscConfig+0x6da>
 8001caa:	2301      	movs	r3, #1
 8001cac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x654>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fa40 	bl	8001158 <HAL_GetTick>
 8001cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cdc:	e00e      	b.n	8001cfc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cde:	f7ff fa3b 	bl	8001158 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d906      	bls.n	8001cfc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e3d9      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	10908120 	.word	0x10908120
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d0e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d12:	2202      	movs	r2, #2
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4ba5      	ldr	r3, [pc, #660]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d42:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d46:	2102      	movs	r1, #2
 8001d48:	6019      	str	r1, [r3, #0]
 8001d4a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f1a3 	rbit	r1, r3
 8001d54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d58:	6019      	str	r1, [r3, #0]
  return result;
 8001d5a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0b0      	beq.n	8001cde <HAL_RCC_OscConfig+0x63a>
 8001d7c:	e06a      	b.n	8001e54 <HAL_RCC_OscConfig+0x7b0>
 8001d7e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d94:	601a      	str	r2, [r3, #0]
  return result;
 8001d96:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d9a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b8c      	ldr	r3, [pc, #560]	; (8001fd8 <HAL_RCC_OscConfig+0x934>)
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	461a      	mov	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7ff f9d2 	bl	8001158 <HAL_GetTick>
 8001db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	e009      	b.n	8001dce <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dba:	f7ff f9cd 	bl	8001158 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e36b      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
 8001dce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	fa93 f2a3 	rbit	r2, r3
 8001de0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001dea:	2202      	movs	r2, #2
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	fa93 f2a3 	rbit	r2, r3
 8001df8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e02:	2202      	movs	r2, #2
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e16:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e1e:	2102      	movs	r1, #2
 8001e20:	6019      	str	r1, [r3, #0]
 8001e22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f1a3 	rbit	r1, r3
 8001e2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e30:	6019      	str	r1, [r3, #0]
  return result;
 8001e32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1b2      	bne.n	8001dba <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8158 	beq.w	8002114 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d112      	bne.n	8001e9c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a56      	ldr	r2, [pc, #344]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_RCC_OscConfig+0x938>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d11a      	bne.n	8001ede <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_RCC_OscConfig+0x938>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a4b      	ldr	r2, [pc, #300]	; (8001fdc <HAL_RCC_OscConfig+0x938>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f950 	bl	8001158 <HAL_GetTick>
 8001eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e009      	b.n	8001ed2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff f94b 	bl	8001158 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e2e9      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <HAL_RCC_OscConfig+0x938>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ef      	beq.n	8001ebe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x852>
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a39      	ldr	r2, [pc, #228]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e02f      	b.n	8001f56 <HAL_RCC_OscConfig+0x8b2>
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_OscConfig+0x876>
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a33      	ldr	r2, [pc, #204]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a30      	ldr	r2, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e01d      	b.n	8001f56 <HAL_RCC_OscConfig+0x8b2>
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x89a>
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a2a      	ldr	r2, [pc, #168]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x8b2>
 8001f3e:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d06b      	beq.n	8002038 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7ff f8fa 	bl	8001158 <HAL_GetTick>
 8001f64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	e00b      	b.n	8001f82 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff f8f5 	bl	8001158 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e291      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
 8001f82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f86:	2202      	movs	r2, #2
 8001f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	fa93 f2a3 	rbit	r2, r3
 8001fac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fb0:	601a      	str	r2, [r3, #0]
  return result;
 8001fb2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d109      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x93c>
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <HAL_RCC_OscConfig+0x930>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	e014      	b.n	8001ffc <HAL_RCC_OscConfig+0x958>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	10908120 	.word	0x10908120
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	4bbb      	ldr	r3, [pc, #748]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002000:	2102      	movs	r1, #2
 8002002:	6011      	str	r1, [r2, #0]
 8002004:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	fa92 f1a2 	rbit	r1, r2
 800200e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002012:	6011      	str	r1, [r2, #0]
  return result;
 8002014:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	fab2 f282 	clz	r2, r2
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f002 021f 	and.w	r2, r2, #31
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f202 	lsl.w	r2, r1, r2
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d099      	beq.n	8001f6a <HAL_RCC_OscConfig+0x8c6>
 8002036:	e063      	b.n	8002100 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7ff f88e 	bl	8001158 <HAL_GetTick>
 800203c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff f889 	bl	8001158 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e225      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
 800205a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800205e:	2202      	movs	r2, #2
 8002060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002076:	2202      	movs	r2, #2
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002088:	601a      	str	r2, [r3, #0]
  return result;
 800208a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800208e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f043 0302 	orr.w	r3, r3, #2
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d102      	bne.n	80020aa <HAL_RCC_OscConfig+0xa06>
 80020a4:	4b90      	ldr	r3, [pc, #576]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	e00d      	b.n	80020c6 <HAL_RCC_OscConfig+0xa22>
 80020aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020ae:	2202      	movs	r2, #2
 80020b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020ca:	2102      	movs	r1, #2
 80020cc:	6011      	str	r1, [r2, #0]
 80020ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	fa92 f1a2 	rbit	r1, r2
 80020d8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80020dc:	6011      	str	r1, [r2, #0]
  return result;
 80020de:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	f002 021f 	and.w	r2, r2, #31
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f202 	lsl.w	r2, r1, r2
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1a0      	bne.n	8002042 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002100:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b77      	ldr	r3, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a76      	ldr	r2, [pc, #472]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 81c2 	beq.w	80024a4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002120:	4b71      	ldr	r3, [pc, #452]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	f000 819c 	beq.w	8002466 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b02      	cmp	r3, #2
 8002136:	f040 8114 	bne.w	8002362 <HAL_RCC_OscConfig+0xcbe>
 800213a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800213e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	fa93 f2a3 	rbit	r2, r3
 800214e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002152:	601a      	str	r2, [r3, #0]
  return result;
 8002154:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002158:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002164:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	461a      	mov	r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fff2 	bl	8001158 <HAL_GetTick>
 8002174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002178:	e009      	b.n	800218e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe ffed 	bl	8001158 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e18b      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
 800218e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f2a3 	rbit	r2, r3
 80021a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021a6:	601a      	str	r2, [r3, #0]
  return result;
 80021a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0xb24>
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e01b      	b.n	8002200 <HAL_RCC_OscConfig+0xb5c>
 80021c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002204:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002208:	6011      	str	r1, [r2, #0]
 800220a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	fa92 f1a2 	rbit	r1, r2
 8002214:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002218:	6011      	str	r1, [r2, #0]
  return result;
 800221a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f042 0220 	orr.w	r2, r2, #32
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f002 021f 	and.w	r2, r2, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d19e      	bne.n	800217a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	430b      	orrs	r3, r1
 8002252:	4925      	ldr	r1, [pc, #148]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
 8002258:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800225c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002270:	601a      	str	r2, [r3, #0]
  return result;
 8002272:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002276:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002282:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	461a      	mov	r2, r3
 800228a:	2301      	movs	r3, #1
 800228c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe ff63 	bl	8001158 <HAL_GetTick>
 8002292:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002296:	e009      	b.n	80022ac <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe ff5e 	bl	8001158 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0fc      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
 80022ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022c4:	601a      	str	r2, [r3, #0]
  return result;
 80022c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0xc48>
 80022e0:	4b01      	ldr	r3, [pc, #4]	; (80022e8 <HAL_RCC_OscConfig+0xc44>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	e01e      	b.n	8002324 <HAL_RCC_OscConfig+0xc80>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f2a3 	rbit	r2, r3
 8002300:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800230a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa93 f2a3 	rbit	r2, r3
 800231a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCC_OscConfig+0xe0c>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800232c:	6011      	str	r1, [r2, #0]
 800232e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	fa92 f1a2 	rbit	r1, r2
 8002338:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800233c:	6011      	str	r1, [r2, #0]
  return result;
 800233e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	fab2 f282 	clz	r2, r2
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f042 0220 	orr.w	r2, r2, #32
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f002 021f 	and.w	r2, r2, #31
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d09b      	beq.n	8002298 <HAL_RCC_OscConfig+0xbf4>
 8002360:	e0a0      	b.n	80024a4 <HAL_RCC_OscConfig+0xe00>
 8002362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fa93 f2a3 	rbit	r2, r3
 8002376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237a:	601a      	str	r2, [r3, #0]
  return result;
 800237c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002380:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800238c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	461a      	mov	r2, r3
 8002394:	2300      	movs	r3, #0
 8002396:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fede 	bl	8001158 <HAL_GetTick>
 800239c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	e009      	b.n	80023b6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe fed9 	bl	8001158 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e077      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
 80023b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	601a      	str	r2, [r3, #0]
  return result;
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d102      	bne.n	80023f0 <HAL_RCC_OscConfig+0xd4c>
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCC_OscConfig+0xe0c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	e01b      	b.n	8002428 <HAL_RCC_OscConfig+0xd84>
 80023f0:	f107 0320 	add.w	r3, r7, #32
 80023f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f107 0320 	add.w	r3, r7, #32
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f107 0318 	add.w	r3, r7, #24
 800240e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_RCC_OscConfig+0xe0c>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f107 0210 	add.w	r2, r7, #16
 800242c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002430:	6011      	str	r1, [r2, #0]
 8002432:	f107 0210 	add.w	r2, r7, #16
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	fa92 f1a2 	rbit	r1, r2
 800243c:	f107 020c 	add.w	r2, r7, #12
 8002440:	6011      	str	r1, [r2, #0]
  return result;
 8002442:	f107 020c 	add.w	r2, r7, #12
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f042 0220 	orr.w	r2, r2, #32
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f002 021f 	and.w	r2, r2, #31
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d19e      	bne.n	80023a2 <HAL_RCC_OscConfig+0xcfe>
 8002464:	e01e      	b.n	80024a4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e018      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_RCC_OscConfig+0xe0c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800247c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	429a      	cmp	r2, r3
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800248e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b09e      	sub	sp, #120	; 0x78
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e162      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b90      	ldr	r3, [pc, #576]	; (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d910      	bls.n	80024fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b8d      	ldr	r3, [pc, #564]	; (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 0207 	bic.w	r2, r3, #7
 80024e2:	498b      	ldr	r1, [pc, #556]	; (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b89      	ldr	r3, [pc, #548]	; (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e14a      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b82      	ldr	r3, [pc, #520]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	497f      	ldr	r1, [pc, #508]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80dc 	beq.w	80026e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d13c      	bne.n	80025aa <HAL_RCC_ClockConfig+0xf6>
 8002530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002534:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <HAL_RCC_ClockConfig+0xa6>
 8002554:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e00f      	b.n	800257a <HAL_RCC_ClockConfig+0xc6>
 800255a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	667b      	str	r3, [r7, #100]	; 0x64
 8002568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
 800256e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800257e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002582:	fa92 f2a2 	rbit	r2, r2
 8002586:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f042 0220 	orr.w	r2, r2, #32
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f002 021f 	and.w	r2, r2, #31
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d17b      	bne.n	800269e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0f3      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d13c      	bne.n	800262c <HAL_RCC_ClockConfig+0x178>
 80025b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_ClockConfig+0x128>
 80025d6:	4b4f      	ldr	r3, [pc, #316]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e00f      	b.n	80025fc <HAL_RCC_ClockConfig+0x148>
 80025dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
 80025f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002600:	63ba      	str	r2, [r7, #56]	; 0x38
 8002602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002604:	fa92 f2a2 	rbit	r2, r2
 8002608:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800260a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800260c:	fab2 f282 	clz	r2, r2
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f042 0220 	orr.w	r2, r2, #32
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f002 021f 	and.w	r2, r2, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d13a      	bne.n	800269e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b2      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
 800262c:	2302      	movs	r3, #2
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_ClockConfig+0x1a0>
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e00d      	b.n	8002670 <HAL_RCC_ClockConfig+0x1bc>
 8002654:	2302      	movs	r3, #2
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	2202      	movs	r2, #2
 8002672:	61ba      	str	r2, [r7, #24]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	fa92 f2a2 	rbit	r2, r2
 800267a:	617a      	str	r2, [r7, #20]
  return result;
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	fab2 f282 	clz	r2, r2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f042 0220 	orr.w	r2, r2, #32
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f002 021f 	and.w	r2, r2, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e079      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	491a      	ldr	r1, [pc, #104]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7fe fd52 	bl	8001158 <HAL_GetTick>
 80026b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fe fd4e 	bl	8001158 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e061      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_ClockConfig+0x260>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d214      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4906      	ldr	r1, [pc, #24]	; (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <HAL_RCC_ClockConfig+0x25c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e040      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_RCC_ClockConfig+0x2e8>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	491a      	ldr	r1, [pc, #104]	; (800279c <HAL_RCC_ClockConfig+0x2e8>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_RCC_ClockConfig+0x2e8>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4912      	ldr	r1, [pc, #72]	; (800279c <HAL_RCC_ClockConfig+0x2e8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002756:	f000 f829 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 800275a:	4601      	mov	r1, r0
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_RCC_ClockConfig+0x2e8>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002764:	22f0      	movs	r2, #240	; 0xf0
 8002766:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	60fa      	str	r2, [r7, #12]
  return result;
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	fab2 f282 	clz	r2, r2
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	40d3      	lsrs	r3, r2
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x2ec>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	fa21 f303 	lsr.w	r3, r1, r3
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_RCC_ClockConfig+0x2f0>)
 8002784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_RCC_ClockConfig+0x2f4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fca0 	bl	80010d0 <HAL_InitTick>
  
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3778      	adds	r7, #120	; 0x78
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	080030a4 	.word	0x080030a4
 80027a4:	20000000 	.word	0x20000000
 80027a8:	20000010 	.word	0x20000010

080027ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b08b      	sub	sp, #44	; 0x2c
 80027b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x30>
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x36>
 80027da:	e03c      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027de:	623b      	str	r3, [r7, #32]
      break;
 80027e0:	e03c      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	fa92 f2a2 	rbit	r2, r2
 80027f4:	607a      	str	r2, [r7, #4]
  return result;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	fab2 f282 	clz	r2, r2
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	40d3      	lsrs	r3, r2
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	220f      	movs	r2, #15
 8002810:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	fa92 f2a2 	rbit	r2, r2
 8002818:	60fa      	str	r2, [r7, #12]
  return result;
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	fab2 f282 	clz	r2, r2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	40d3      	lsrs	r3, r2
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	fbb2 f2f3 	udiv	r2, r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	e004      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4a0c      	ldr	r2, [pc, #48]	; (800287c <HAL_RCC_GetSysClockFreq+0xd0>)
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	623b      	str	r3, [r7, #32]
      break;
 8002854:	e002      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002858:	623b      	str	r3, [r7, #32]
      break;
 800285a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285c:	6a3b      	ldr	r3, [r7, #32]
}
 800285e:	4618      	mov	r0, r3
 8002860:	372c      	adds	r7, #44	; 0x2c
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	080030b4 	.word	0x080030b4
 8002878:	080030c4 	.word	0x080030c4
 800287c:	003d0900 	.word	0x003d0900

08002880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e084      	b.n	800299c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7fe fadf 	bl	8000e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028d2:	d902      	bls.n	80028da <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e002      	b.n	80028e0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028e8:	d007      	beq.n	80028fa <HAL_SPI_Init+0x7a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028f2:	d002      	beq.n	80028fa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10b      	bne.n	800291a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800290a:	d903      	bls.n	8002914 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	631a      	str	r2, [r3, #48]	; 0x30
 8002912:	e002      	b.n	800291a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	ea42 0103 	orr.w	r1, r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 0204 	and.w	r2, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	ea42 0103 	orr.w	r1, r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800298a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_SPI_Transmit+0x22>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e150      	b.n	8002c68 <HAL_SPI_Transmit+0x2c4>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029ce:	f7fe fbc3 	bl	8001158 <HAL_GetTick>
 80029d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d002      	beq.n	80029ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
 80029e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029e8:	e135      	b.n	8002c56 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_SPI_Transmit+0x52>
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029fa:	e12c      	b.n	8002c56 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2203      	movs	r2, #3
 8002a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	88fa      	ldrh	r2, [r7, #6]
 8002a14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	88fa      	ldrh	r2, [r7, #6]
 8002a1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a46:	d107      	bne.n	8002a58 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d007      	beq.n	8002a76 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a7e:	d94b      	bls.n	8002b18 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_SPI_Transmit+0xea>
 8002a88:	8afb      	ldrh	r3, [r7, #22]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d13e      	bne.n	8002b0c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	881a      	ldrh	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	1c9a      	adds	r2, r3, #2
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ab2:	e02b      	b.n	8002b0c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d112      	bne.n	8002ae8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	1c9a      	adds	r2, r3, #2
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ae6:	e011      	b.n	8002b0c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ae8:	f7fe fb36 	bl	8001158 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d803      	bhi.n	8002b00 <HAL_SPI_Transmit+0x15c>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d102      	bne.n	8002b06 <HAL_SPI_Transmit+0x162>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b0a:	e0a4      	b.n	8002c56 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ce      	bne.n	8002ab4 <HAL_SPI_Transmit+0x110>
 8002b16:	e07c      	b.n	8002c12 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Transmit+0x182>
 8002b20:	8afb      	ldrh	r3, [r7, #22]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d170      	bne.n	8002c08 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d912      	bls.n	8002b56 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	881a      	ldrh	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	1c9a      	adds	r2, r3, #2
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b02      	subs	r3, #2
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b54:	e058      	b.n	8002c08 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002b7c:	e044      	b.n	8002c08 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d12b      	bne.n	8002be4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d912      	bls.n	8002bbc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b02      	subs	r3, #2
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bba:	e025      	b.n	8002c08 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002be2:	e011      	b.n	8002c08 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be4:	f7fe fab8 	bl	8001158 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d803      	bhi.n	8002bfc <HAL_SPI_Transmit+0x258>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d102      	bne.n	8002c02 <HAL_SPI_Transmit+0x25e>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c06:	e026      	b.n	8002c56 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1b5      	bne.n	8002b7e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f901 	bl	8002e1e <SPI_EndRxTxTransaction>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	77fb      	strb	r3, [r7, #31]
 8002c52:	e000      	b.n	8002c56 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002c54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c80:	e04c      	b.n	8002d1c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d048      	beq.n	8002d1c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c8a:	f7fe fa65 	bl	8001158 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d902      	bls.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d13d      	bne.n	8002d1c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb8:	d111      	bne.n	8002cde <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc2:	d004      	beq.n	8002cce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ccc:	d107      	bne.n	8002cde <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cdc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d10f      	bne.n	8002d08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e00f      	b.n	8002d3c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4013      	ands	r3, r2
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d1a3      	bne.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d52:	e057      	b.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d5a:	d106      	bne.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0x26>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d048      	beq.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d72:	f7fe f9f1 	bl	8001158 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d902      	bls.n	8002d88 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d13d      	bne.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da0:	d111      	bne.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002daa:	d004      	beq.n	8002db6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db4:	d107      	bne.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	d10f      	bne.n	8002df0 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e008      	b.n	8002e16 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d19f      	bne.n	8002d54 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af02      	add	r7, sp, #8
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff ff84 	bl	8002d44 <SPI_WaitFifoStateUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e027      	b.n	8002ea2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff ff07 	bl	8002c70 <SPI_WaitFlagStateUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e014      	b.n	8002ea2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7ff ff5d 	bl	8002d44 <SPI_WaitFifoStateUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e000      	b.n	8002ea2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <__errno>:
 8002eac:	4b01      	ldr	r3, [pc, #4]	; (8002eb4 <__errno+0x8>)
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000018 	.word	0x20000018

08002eb8 <__libc_init_array>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4e0d      	ldr	r6, [pc, #52]	; (8002ef0 <__libc_init_array+0x38>)
 8002ebc:	4c0d      	ldr	r4, [pc, #52]	; (8002ef4 <__libc_init_array+0x3c>)
 8002ebe:	1ba4      	subs	r4, r4, r6
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	42a5      	cmp	r5, r4
 8002ec6:	d109      	bne.n	8002edc <__libc_init_array+0x24>
 8002ec8:	4e0b      	ldr	r6, [pc, #44]	; (8002ef8 <__libc_init_array+0x40>)
 8002eca:	4c0c      	ldr	r4, [pc, #48]	; (8002efc <__libc_init_array+0x44>)
 8002ecc:	f000 f8de 	bl	800308c <_init>
 8002ed0:	1ba4      	subs	r4, r4, r6
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	2500      	movs	r5, #0
 8002ed6:	42a5      	cmp	r5, r4
 8002ed8:	d105      	bne.n	8002ee6 <__libc_init_array+0x2e>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ee0:	4798      	blx	r3
 8002ee2:	3501      	adds	r5, #1
 8002ee4:	e7ee      	b.n	8002ec4 <__libc_init_array+0xc>
 8002ee6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eea:	4798      	blx	r3
 8002eec:	3501      	adds	r5, #1
 8002eee:	e7f2      	b.n	8002ed6 <__libc_init_array+0x1e>
 8002ef0:	080030d4 	.word	0x080030d4
 8002ef4:	080030d4 	.word	0x080030d4
 8002ef8:	080030d4 	.word	0x080030d4
 8002efc:	080030d8 	.word	0x080030d8

08002f00 <malloc>:
 8002f00:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <malloc+0xc>)
 8002f02:	4601      	mov	r1, r0
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	f000 b80b 	b.w	8002f20 <_malloc_r>
 8002f0a:	bf00      	nop
 8002f0c:	20000018 	.word	0x20000018

08002f10 <memset>:
 8002f10:	4402      	add	r2, r0
 8002f12:	4603      	mov	r3, r0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d100      	bne.n	8002f1a <memset+0xa>
 8002f18:	4770      	bx	lr
 8002f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1e:	e7f9      	b.n	8002f14 <memset+0x4>

08002f20 <_malloc_r>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	1ccd      	adds	r5, r1, #3
 8002f24:	f025 0503 	bic.w	r5, r5, #3
 8002f28:	3508      	adds	r5, #8
 8002f2a:	2d0c      	cmp	r5, #12
 8002f2c:	bf38      	it	cc
 8002f2e:	250c      	movcc	r5, #12
 8002f30:	2d00      	cmp	r5, #0
 8002f32:	4606      	mov	r6, r0
 8002f34:	db01      	blt.n	8002f3a <_malloc_r+0x1a>
 8002f36:	42a9      	cmp	r1, r5
 8002f38:	d903      	bls.n	8002f42 <_malloc_r+0x22>
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	6033      	str	r3, [r6, #0]
 8002f3e:	2000      	movs	r0, #0
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	f000 f857 	bl	8002ff4 <__malloc_lock>
 8002f46:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <_malloc_r+0xac>)
 8002f48:	6814      	ldr	r4, [r2, #0]
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	b991      	cbnz	r1, 8002f74 <_malloc_r+0x54>
 8002f4e:	4c20      	ldr	r4, [pc, #128]	; (8002fd0 <_malloc_r+0xb0>)
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	b91b      	cbnz	r3, 8002f5c <_malloc_r+0x3c>
 8002f54:	4630      	mov	r0, r6
 8002f56:	f000 f83d 	bl	8002fd4 <_sbrk_r>
 8002f5a:	6020      	str	r0, [r4, #0]
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	4630      	mov	r0, r6
 8002f60:	f000 f838 	bl	8002fd4 <_sbrk_r>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d124      	bne.n	8002fb2 <_malloc_r+0x92>
 8002f68:	230c      	movs	r3, #12
 8002f6a:	6033      	str	r3, [r6, #0]
 8002f6c:	4630      	mov	r0, r6
 8002f6e:	f000 f842 	bl	8002ff6 <__malloc_unlock>
 8002f72:	e7e4      	b.n	8002f3e <_malloc_r+0x1e>
 8002f74:	680b      	ldr	r3, [r1, #0]
 8002f76:	1b5b      	subs	r3, r3, r5
 8002f78:	d418      	bmi.n	8002fac <_malloc_r+0x8c>
 8002f7a:	2b0b      	cmp	r3, #11
 8002f7c:	d90f      	bls.n	8002f9e <_malloc_r+0x7e>
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	50cd      	str	r5, [r1, r3]
 8002f82:	18cc      	adds	r4, r1, r3
 8002f84:	4630      	mov	r0, r6
 8002f86:	f000 f836 	bl	8002ff6 <__malloc_unlock>
 8002f8a:	f104 000b 	add.w	r0, r4, #11
 8002f8e:	1d23      	adds	r3, r4, #4
 8002f90:	f020 0007 	bic.w	r0, r0, #7
 8002f94:	1ac3      	subs	r3, r0, r3
 8002f96:	d0d3      	beq.n	8002f40 <_malloc_r+0x20>
 8002f98:	425a      	negs	r2, r3
 8002f9a:	50e2      	str	r2, [r4, r3]
 8002f9c:	e7d0      	b.n	8002f40 <_malloc_r+0x20>
 8002f9e:	428c      	cmp	r4, r1
 8002fa0:	684b      	ldr	r3, [r1, #4]
 8002fa2:	bf16      	itet	ne
 8002fa4:	6063      	strne	r3, [r4, #4]
 8002fa6:	6013      	streq	r3, [r2, #0]
 8002fa8:	460c      	movne	r4, r1
 8002faa:	e7eb      	b.n	8002f84 <_malloc_r+0x64>
 8002fac:	460c      	mov	r4, r1
 8002fae:	6849      	ldr	r1, [r1, #4]
 8002fb0:	e7cc      	b.n	8002f4c <_malloc_r+0x2c>
 8002fb2:	1cc4      	adds	r4, r0, #3
 8002fb4:	f024 0403 	bic.w	r4, r4, #3
 8002fb8:	42a0      	cmp	r0, r4
 8002fba:	d005      	beq.n	8002fc8 <_malloc_r+0xa8>
 8002fbc:	1a21      	subs	r1, r4, r0
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f000 f808 	bl	8002fd4 <_sbrk_r>
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	d0cf      	beq.n	8002f68 <_malloc_r+0x48>
 8002fc8:	6025      	str	r5, [r4, #0]
 8002fca:	e7db      	b.n	8002f84 <_malloc_r+0x64>
 8002fcc:	2000009c 	.word	0x2000009c
 8002fd0:	200000a0 	.word	0x200000a0

08002fd4 <_sbrk_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	4c06      	ldr	r4, [pc, #24]	; (8002ff0 <_sbrk_r+0x1c>)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	4605      	mov	r5, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	6023      	str	r3, [r4, #0]
 8002fe0:	f7fd ffb6 	bl	8000f50 <_sbrk>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d102      	bne.n	8002fee <_sbrk_r+0x1a>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	b103      	cbz	r3, 8002fee <_sbrk_r+0x1a>
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	20000110 	.word	0x20000110

08002ff4 <__malloc_lock>:
 8002ff4:	4770      	bx	lr

08002ff6 <__malloc_unlock>:
 8002ff6:	4770      	bx	lr

08002ff8 <round>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	ec57 6b10 	vmov	r6, r7, d0
 8002ffe:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8003002:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8003006:	2c13      	cmp	r4, #19
 8003008:	463b      	mov	r3, r7
 800300a:	463d      	mov	r5, r7
 800300c:	dc17      	bgt.n	800303e <round+0x46>
 800300e:	2c00      	cmp	r4, #0
 8003010:	da09      	bge.n	8003026 <round+0x2e>
 8003012:	3401      	adds	r4, #1
 8003014:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8003018:	d103      	bne.n	8003022 <round+0x2a>
 800301a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800301e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003022:	2100      	movs	r1, #0
 8003024:	e02c      	b.n	8003080 <round+0x88>
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <round+0x90>)
 8003028:	4122      	asrs	r2, r4
 800302a:	4217      	tst	r7, r2
 800302c:	d100      	bne.n	8003030 <round+0x38>
 800302e:	b19e      	cbz	r6, 8003058 <round+0x60>
 8003030:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003034:	4123      	asrs	r3, r4
 8003036:	442b      	add	r3, r5
 8003038:	ea23 0302 	bic.w	r3, r3, r2
 800303c:	e7f1      	b.n	8003022 <round+0x2a>
 800303e:	2c33      	cmp	r4, #51	; 0x33
 8003040:	dd0d      	ble.n	800305e <round+0x66>
 8003042:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003046:	d107      	bne.n	8003058 <round+0x60>
 8003048:	4630      	mov	r0, r6
 800304a:	4639      	mov	r1, r7
 800304c:	ee10 2a10 	vmov	r2, s0
 8003050:	f7fd f8c0 	bl	80001d4 <__adddf3>
 8003054:	4606      	mov	r6, r0
 8003056:	460f      	mov	r7, r1
 8003058:	ec47 6b10 	vmov	d0, r6, r7
 800305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800305e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8003062:	f04f 30ff 	mov.w	r0, #4294967295
 8003066:	40d0      	lsrs	r0, r2
 8003068:	4206      	tst	r6, r0
 800306a:	d0f5      	beq.n	8003058 <round+0x60>
 800306c:	2201      	movs	r2, #1
 800306e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003072:	fa02 f404 	lsl.w	r4, r2, r4
 8003076:	1931      	adds	r1, r6, r4
 8003078:	bf28      	it	cs
 800307a:	189b      	addcs	r3, r3, r2
 800307c:	ea21 0100 	bic.w	r1, r1, r0
 8003080:	461f      	mov	r7, r3
 8003082:	460e      	mov	r6, r1
 8003084:	e7e8      	b.n	8003058 <round+0x60>
 8003086:	bf00      	nop
 8003088:	000fffff 	.word	0x000fffff

0800308c <_init>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr

08003098 <_fini>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr
