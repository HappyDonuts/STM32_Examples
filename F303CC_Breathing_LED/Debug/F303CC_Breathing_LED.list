
F303CC_Breathing_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002634  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b8  080028b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080028b8  080028b8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028b8  080028b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080028c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000014  080028d4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080028d4  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094a8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001511  00000000  00000000  000294ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002aa00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002b368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018fb9  00000000  00000000  0002bc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072c6  00000000  00000000  00044be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000939ff  00000000  00000000  0004beaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df8ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002688  00000000  00000000  000df92c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027a4 	.word	0x080027a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080027a4 	.word	0x080027a4

080001c8 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	/* MAIN CODE */
	size = 99;
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <main_s+0x20>)
 80001ce:	2263      	movs	r2, #99	; 0x63
 80001d0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(tim_led);
 80001d2:	4b06      	ldr	r3, [pc, #24]	; (80001ec <main_s+0x24>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fec6 	bl	8001f68 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(tim_mod);
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <main_s+0x28>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fec1 	bl	8001f68 <HAL_TIM_Base_Start_IT>
	
	while(1){
 80001e6:	e7fe      	b.n	80001e6 <main_s+0x1e>
 80001e8:	20000036 	.word	0x20000036
 80001ec:	20000000 	.word	0x20000000
 80001f0:	20000004 	.word	0x20000004

080001f4 <HAL_TIM_PeriodElapsedCallback>:

/**
  * @brief  Period elapsed callback.
  * @retval none
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	/* TIM CALLBACK CODE */
	if (htim == tim_mod){
 80001fc:	4b2a      	ldr	r3, [pc, #168]	; (80002a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	429a      	cmp	r2, r3
 8000204:	d123      	bne.n	800024e <HAL_TIM_PeriodElapsedCallback+0x5a>
		static uint8_t index = 0;
		duty_cycle = sinwave[index]*100/65535;
 8000206:	4b29      	ldr	r3, [pc, #164]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	461a      	mov	r2, r3
 800020c:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800020e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000212:	461a      	mov	r2, r3
 8000214:	2364      	movs	r3, #100	; 0x64
 8000216:	fb03 f302 	mul.w	r3, r3, r2
 800021a:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800021c:	fb82 1203 	smull	r1, r2, r2, r3
 8000220:	441a      	add	r2, r3
 8000222:	13d2      	asrs	r2, r2, #15
 8000224:	17db      	asrs	r3, r3, #31
 8000226:	1ad3      	subs	r3, r2, r3
 8000228:	b29a      	uxth	r2, r3
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800022c:	801a      	strh	r2, [r3, #0]
		if (index == size){
 800022e:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000230:	781a      	ldrb	r2, [r3, #0]
 8000232:	4b22      	ldr	r3, [pc, #136]	; (80002bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	429a      	cmp	r2, r3
 8000238:	d103      	bne.n	8000242 <HAL_TIM_PeriodElapsedCallback+0x4e>
			index = 0;
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
 8000240:	e005      	b.n	800024e <HAL_TIM_PeriodElapsedCallback+0x5a>
		} else {
			index++;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	3301      	adds	r3, #1
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4b18      	ldr	r3, [pc, #96]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800024c:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (htim == tim_led){
 800024e:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	429a      	cmp	r2, r3
 8000256:	d123      	bne.n	80002a0 <HAL_TIM_PeriodElapsedCallback+0xac>
		static uint16_t counter = 0;
		if (counter < duty_cycle){
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800025a:	881a      	ldrh	r2, [r3, #0]
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	429a      	cmp	r2, r3
 8000262:	d206      	bcs.n	8000272 <HAL_TIM_PeriodElapsedCallback+0x7e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026a:	4817      	ldr	r0, [pc, #92]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800026c:	f000 fd4a 	bl	8000d04 <HAL_GPIO_WritePin>
 8000270:	e005      	b.n	800027e <HAL_TIM_PeriodElapsedCallback+0x8a>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000278:	4813      	ldr	r0, [pc, #76]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800027a:	f000 fd43 	bl	8000d04 <HAL_GPIO_WritePin>
		}
		if (counter == size){
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	b29a      	uxth	r2, r3
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d103      	bne.n	8000294 <HAL_TIM_PeriodElapsedCallback+0xa0>
			counter = 0;
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800028e:	2200      	movs	r2, #0
 8000290:	801a      	strh	r2, [r3, #0]
		} else {
			counter++;
		}
	}
}
 8000292:	e005      	b.n	80002a0 <HAL_TIM_PeriodElapsedCallback+0xac>
			counter++;
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	b29a      	uxth	r2, r3
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800029e:	801a      	strh	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000032 	.word	0x20000032
 80002b0:	080027bc 	.word	0x080027bc
 80002b4:	80008001 	.word	0x80008001
 80002b8:	20000030 	.word	0x20000030
 80002bc:	20000036 	.word	0x20000036
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000034 	.word	0x20000034
 80002c8:	48000800 	.word	0x48000800

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d0:	f000 fa26 	bl	8000720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d4:	f000 f809 	bl	80002ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d8:	f000 f8e8 	bl	80004ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80002dc:	f000 f84a 	bl	8000374 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002e0:	f000 f894 	bl	800040c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 80002e4:	f7ff ff70 	bl	80001c8 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <main+0x1c>

080002ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b090      	sub	sp, #64	; 0x40
 80002ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	2228      	movs	r2, #40	; 0x28
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 fa4b 	bl	8002794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030c:	2301      	movs	r3, #1
 800030e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000314:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2302      	movs	r3, #2
 8000320:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000326:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000328:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	4618      	mov	r0, r3
 8000334:	f000 fcfe 	bl	8000d34 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033e:	f000 f901 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2102      	movs	r1, #2
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fbf1 	bl	8001b44 <HAL_RCC_ClockConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000368:	f000 f8ec 	bl	8000544 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3740      	adds	r7, #64	; 0x40
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000392:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_TIM2_Init+0x94>)
 8000394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000398:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_TIM2_Init+0x94>)
 800039c:	2223      	movs	r2, #35	; 0x23
 800039e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a0:	4b19      	ldr	r3, [pc, #100]	; (8000408 <MX_TIM2_Init+0x94>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_TIM2_Init+0x94>)
 80003a8:	2209      	movs	r2, #9
 80003aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <MX_TIM2_Init+0x94>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_TIM2_Init+0x94>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b8:	4813      	ldr	r0, [pc, #76]	; (8000408 <MX_TIM2_Init+0x94>)
 80003ba:	f001 fda9 	bl	8001f10 <HAL_TIM_Base_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003c4:	f000 f8be 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <MX_TIM2_Init+0x94>)
 80003d6:	f001 ff10 	bl	80021fa <HAL_TIM_ConfigClockSource>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003e0:	f000 f8b0 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_TIM2_Init+0x94>)
 80003f2:	f002 f90d 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003fc:	f000 f8a2 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000078 	.word	0x20000078

0800040c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800042a:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <MX_TIM3_Init+0x98>)
 800042c:	4a1e      	ldr	r2, [pc, #120]	; (80004a8 <MX_TIM3_Init+0x9c>)
 800042e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <MX_TIM3_Init+0x98>)
 8000432:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <MX_TIM3_Init+0x98>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800043e:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <MX_TIM3_Init+0x98>)
 8000440:	f242 720f 	movw	r2, #9999	; 0x270f
 8000444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <MX_TIM3_Init+0x98>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <MX_TIM3_Init+0x98>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000452:	4814      	ldr	r0, [pc, #80]	; (80004a4 <MX_TIM3_Init+0x98>)
 8000454:	f001 fd5c 	bl	8001f10 <HAL_TIM_Base_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800045e:	f000 f871 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000466:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	480d      	ldr	r0, [pc, #52]	; (80004a4 <MX_TIM3_Init+0x98>)
 8000470:	f001 fec3 	bl	80021fa <HAL_TIM_ConfigClockSource>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800047a:	f000 f863 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047e:	2300      	movs	r3, #0
 8000480:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	4619      	mov	r1, r3
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <MX_TIM3_Init+0x98>)
 800048c:	f002 f8c0 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000496:	f000 f855 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	3720      	adds	r7, #32
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000038 	.word	0x20000038
 80004a8:	40000400 	.word	0x40000400

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <MX_GPIO_Init+0x90>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a1d      	ldr	r2, [pc, #116]	; (800053c <MX_GPIO_Init+0x90>)
 80004c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b1b      	ldr	r3, [pc, #108]	; (800053c <MX_GPIO_Init+0x90>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_GPIO_Init+0x90>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a17      	ldr	r2, [pc, #92]	; (800053c <MX_GPIO_Init+0x90>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_GPIO_Init+0x90>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <MX_GPIO_Init+0x90>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a11      	ldr	r2, [pc, #68]	; (800053c <MX_GPIO_Init+0x90>)
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_GPIO_Init+0x90>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <MX_GPIO_Init+0x94>)
 8000512:	f000 fbf7 	bl	8000d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	4619      	mov	r1, r3
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <MX_GPIO_Init+0x94>)
 8000530:	f000 fa6e 	bl	8000a10 <HAL_GPIO_Init>

}
 8000534:	bf00      	nop
 8000536:	3720      	adds	r7, #32
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	48000800 	.word	0x48000800

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x44>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_MspInit+0x44>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <HAL_MspInit+0x44>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_MspInit+0x44>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_MspInit+0x44>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005ac:	d114      	bne.n	80005d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <HAL_TIM_Base_MspInit+0x78>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a18      	ldr	r2, [pc, #96]	; (8000614 <HAL_TIM_Base_MspInit+0x78>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_TIM_Base_MspInit+0x78>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	201c      	movs	r0, #28
 80005cc:	f000 f9e9 	bl	80009a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005d0:	201c      	movs	r0, #28
 80005d2:	f000 fa02 	bl	80009da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005d6:	e018      	b.n	800060a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_TIM_Base_MspInit+0x7c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d113      	bne.n	800060a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_TIM_Base_MspInit+0x78>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <HAL_TIM_Base_MspInit+0x78>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_TIM_Base_MspInit+0x78>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	201d      	movs	r0, #29
 8000600:	f000 f9cf 	bl	80009a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000604:	201d      	movs	r0, #29
 8000606:	f000 f9e8 	bl	80009da <HAL_NVIC_EnableIRQ>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	40000400 	.word	0x40000400

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <MemManage_Handler+0x4>

08000636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <UsageFault_Handler+0x4>

08000642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000670:	f000 f89c 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <TIM2_IRQHandler+0x10>)
 800067e:	f001 fc9d 	bl	8001fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000078 	.word	0x20000078

0800068c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <TIM3_IRQHandler+0x10>)
 8000692:	f001 fc93 	bl	8001fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000038 	.word	0x20000038

080006a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <SystemInit+0x28>)
 80006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <SystemInit+0x28>)
 80006ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <SystemInit+0x28>)
 80006b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ba:	609a      	str	r2, [r3, #8]
#endif
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000704 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006d2:	e003      	b.n	80006dc <LoopCopyDataInit>

080006d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006da:	3104      	adds	r1, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <LoopForever+0xa>)
	ldr	r3, =_edata
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006e4:	d3f6      	bcc.n	80006d4 <CopyDataInit>
	ldr	r2, =_sbss
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006e8:	e002      	b.n	80006f0 <LoopFillZerobss>

080006ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006ec:	f842 3b04 	str.w	r3, [r2], #4

080006f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <LoopForever+0x16>)
	cmp	r2, r3
 80006f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006f4:	d3f9      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f6:	f7ff ffd3 	bl	80006a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fa:	f002 f827 	bl	800274c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fe:	f7ff fde5 	bl	80002cc <main>

08000702 <LoopForever>:

LoopForever:
    b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000704:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000708:	080028c0 	.word	0x080028c0
	ldr	r0, =_sdata
 800070c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000710:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000714:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000718:	200000bc 	.word	0x200000bc

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>
	...

08000720 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_Init+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_Init+0x28>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f92b 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f808 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073c:	f7ff ff0a 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x54>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000762:	fbb3 f3f1 	udiv	r3, r3, r1
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f943 	bl	80009f6 <HAL_SYSTICK_Config>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00e      	b.n	8000798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d80a      	bhi.n	8000796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f000 f90b 	bl	80009a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <HAL_InitTick+0x5c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000010 	.word	0x20000010
 80007a8:	2000000c 	.word	0x2000000c

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x20>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_IncTick+0x24>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_IncTick+0x24>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000010 	.word	0x20000010
 80007d0:	200000b8 	.word	0x200000b8

080007d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_GetTick+0x14>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	200000b8 	.word	0x200000b8

080007ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	60d3      	str	r3, [r2, #12]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <__NVIC_GetPriorityGrouping+0x18>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	f003 0307 	and.w	r3, r3, #7
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0b      	blt.n	800087a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	f003 021f 	and.w	r2, r3, #31
 8000868:	4907      	ldr	r1, [pc, #28]	; (8000888 <__NVIC_EnableIRQ+0x38>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	095b      	lsrs	r3, r3, #5
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000958:	d301      	bcc.n	800095e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2301      	movs	r3, #1
 800095c:	e00f      	b.n	800097e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <SysTick_Config+0x40>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000966:	210f      	movs	r1, #15
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f7ff ff8e 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SysTick_Config+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SysTick_Config+0x40>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff29 	bl	80007ec <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b4:	f7ff ff3e 	bl	8000834 <__NVIC_GetPriorityGrouping>
 80009b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f7ff ff8e 	bl	80008e0 <NVIC_EncodePriority>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff5d 	bl	800088c <__NVIC_SetPriority>
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff31 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ffa2 	bl	8000948 <SysTick_Config>
 8000a04:	4603      	mov	r3, r0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	e154      	b.n	8000cca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 8146 	beq.w	8000cc4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x38>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b12      	cmp	r3, #18
 8000a46:	d123      	bne.n	8000a90 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	08da      	lsrs	r2, r3, #3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3208      	adds	r2, #8
 8000a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f003 0307 	and.w	r3, r3, #7
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	08da      	lsrs	r2, r3, #3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3208      	adds	r2, #8
 8000a8a:	6939      	ldr	r1, [r7, #16]
 8000a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0203 	and.w	r2, r3, #3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d00b      	beq.n	8000ae4 <HAL_GPIO_Init+0xd4>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad8:	2b11      	cmp	r3, #17
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b12      	cmp	r3, #18
 8000ae2:	d130      	bne.n	8000b46 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	2203      	movs	r2, #3
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	091b      	lsrs	r3, r3, #4
 8000b30:	f003 0201 	and.w	r2, r3, #1
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 80a0 	beq.w	8000cc4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <HAL_GPIO_Init+0x2d8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a57      	ldr	r2, [pc, #348]	; (8000ce8 <HAL_GPIO_Init+0x2d8>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b55      	ldr	r3, [pc, #340]	; (8000ce8 <HAL_GPIO_Init+0x2d8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b9c:	4a53      	ldr	r2, [pc, #332]	; (8000cec <HAL_GPIO_Init+0x2dc>)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bc6:	d019      	beq.n	8000bfc <HAL_GPIO_Init+0x1ec>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a49      	ldr	r2, [pc, #292]	; (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_GPIO_Init+0x1e8>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <HAL_GPIO_Init+0x2e4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e4>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a47      	ldr	r2, [pc, #284]	; (8000cf8 <HAL_GPIO_Init+0x2e8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e0>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a46      	ldr	r2, [pc, #280]	; (8000cfc <HAL_GPIO_Init+0x2ec>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_Init+0x1dc>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e008      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bec:	2305      	movs	r3, #5
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e004      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <HAL_GPIO_Init+0x1ee>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	f002 0203 	and.w	r2, r2, #3
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	4093      	lsls	r3, r2
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0e:	4937      	ldr	r1, [pc, #220]	; (8000cec <HAL_GPIO_Init+0x2dc>)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3302      	adds	r3, #2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1c:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <HAL_GPIO_Init+0x2f0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c40:	4a2f      	ldr	r2, [pc, #188]	; (8000d00 <HAL_GPIO_Init+0x2f0>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <HAL_GPIO_Init+0x2f0>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6a:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <HAL_GPIO_Init+0x2f0>)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_GPIO_Init+0x2f0>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <HAL_GPIO_Init+0x2f0>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_GPIO_Init+0x2f0>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_GPIO_Init+0x2f0>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f47f aea3 	bne.w	8000a20 <HAL_GPIO_Init+0x10>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	48000c00 	.word	0x48000c00
 8000cfc:	48001000 	.word	0x48001000
 8000d00:	40010400 	.word	0x40010400

08000d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
 8000d10:	4613      	mov	r3, r2
 8000d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d14:	787b      	ldrb	r3, [r7, #1]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f000 bef4 	b.w	8001b36 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 816a 	beq.w	8001032 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d5e:	4bb3      	ldr	r3, [pc, #716]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d00c      	beq.n	8000d84 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d6a:	4bb0      	ldr	r3, [pc, #704]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d159      	bne.n	8000e2a <HAL_RCC_OscConfig+0xf6>
 8000d76:	4bad      	ldr	r3, [pc, #692]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d82:	d152      	bne.n	8000e2a <HAL_RCC_OscConfig+0xf6>
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d98:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d102      	bne.n	8000db6 <HAL_RCC_OscConfig+0x82>
 8000db0:	4b9e      	ldr	r3, [pc, #632]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	e015      	b.n	8000de2 <HAL_RCC_OscConfig+0xae>
 8000db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dd2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dde:	4b93      	ldr	r3, [pc, #588]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dee:	fa92 f2a2 	rbit	r2, r2
 8000df2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000df6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	f042 0220 	orr.w	r2, r2, #32
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	f002 021f 	and.w	r2, r2, #31
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 810c 	beq.w	8001030 <HAL_RCC_OscConfig+0x2fc>
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8106 	bne.w	8001030 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f000 be86 	b.w	8001b36 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e34:	d106      	bne.n	8000e44 <HAL_RCC_OscConfig+0x110>
 8000e36:	4b7d      	ldr	r3, [pc, #500]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a7c      	ldr	r2, [pc, #496]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e030      	b.n	8000ea6 <HAL_RCC_OscConfig+0x172>
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x134>
 8000e4e:	4b77      	ldr	r3, [pc, #476]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a76      	ldr	r2, [pc, #472]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b74      	ldr	r3, [pc, #464]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a73      	ldr	r2, [pc, #460]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e01e      	b.n	8000ea6 <HAL_RCC_OscConfig+0x172>
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e72:	d10c      	bne.n	8000e8e <HAL_RCC_OscConfig+0x15a>
 8000e74:	4b6d      	ldr	r3, [pc, #436]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a6c      	ldr	r2, [pc, #432]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b6a      	ldr	r3, [pc, #424]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a69      	ldr	r2, [pc, #420]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e00b      	b.n	8000ea6 <HAL_RCC_OscConfig+0x172>
 8000e8e:	4b67      	ldr	r3, [pc, #412]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a66      	ldr	r2, [pc, #408]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b64      	ldr	r3, [pc, #400]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a63      	ldr	r2, [pc, #396]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ea6:	4b61      	ldr	r3, [pc, #388]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	f023 020f 	bic.w	r2, r3, #15
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	495d      	ldr	r1, [pc, #372]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d059      	beq.n	8000f78 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fc86 	bl	80007d4 <HAL_GetTick>
 8000ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ece:	f7ff fc81 	bl	80007d4 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	; 0x64
 8000edc:	d902      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	f000 be29 	b.w	8001b36 <HAL_RCC_OscConfig+0xe02>
 8000ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ef8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d102      	bne.n	8000f16 <HAL_RCC_OscConfig+0x1e2>
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	e015      	b.n	8000f42 <HAL_RCC_OscConfig+0x20e>
 8000f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f32:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f46:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f4e:	fa92 f2a2 	rbit	r2, r2
 8000f52:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f56:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f5a:	fab2 f282 	clz	r2, r2
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	f042 0220 	orr.w	r2, r2, #32
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	f002 021f 	and.w	r2, r2, #31
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0ab      	beq.n	8000ece <HAL_RCC_OscConfig+0x19a>
 8000f76:	e05c      	b.n	8001032 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fc2c 	bl	80007d4 <HAL_GetTick>
 8000f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f80:	e00a      	b.n	8000f98 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f82:	f7ff fc27 	bl	80007d4 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d902      	bls.n	8000f98 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f000 bdcf 	b.w	8001b36 <HAL_RCC_OscConfig+0xe02>
 8000f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb0:	fab3 f383 	clz	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d102      	bne.n	8000fca <HAL_RCC_OscConfig+0x296>
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	e015      	b.n	8000ff6 <HAL_RCC_OscConfig+0x2c2>
 8000fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fe6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_RCC_OscConfig+0x2f8>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ffa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000ffe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001002:	fa92 f2a2 	rbit	r2, r2
 8001006:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800100a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800100e:	fab2 f282 	clz	r2, r2
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	f042 0220 	orr.w	r2, r2, #32
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	f002 021f 	and.w	r2, r2, #31
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1ab      	bne.n	8000f82 <HAL_RCC_OscConfig+0x24e>
 800102a:	e002      	b.n	8001032 <HAL_RCC_OscConfig+0x2fe>
 800102c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 816f 	beq.w	8001320 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001042:	4bd0      	ldr	r3, [pc, #832]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800104e:	4bcd      	ldr	r3, [pc, #820]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b08      	cmp	r3, #8
 8001058:	d16c      	bne.n	8001134 <HAL_RCC_OscConfig+0x400>
 800105a:	4bca      	ldr	r3, [pc, #808]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d166      	bne.n	8001134 <HAL_RCC_OscConfig+0x400>
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001078:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <HAL_RCC_OscConfig+0x362>
 8001090:	4bbc      	ldr	r3, [pc, #752]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	e013      	b.n	80010be <HAL_RCC_OscConfig+0x38a>
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010ba:	4bb2      	ldr	r3, [pc, #712]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	2202      	movs	r2, #2
 80010c0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010d0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010d4:	fab2 f282 	clz	r2, r2
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f042 0220 	orr.w	r2, r2, #32
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f002 021f 	and.w	r2, r2, #31
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_RCC_OscConfig+0x3cc>
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d002      	beq.n	8001100 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f000 bd1b 	b.w	8001b36 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4ba0      	ldr	r3, [pc, #640]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	21f8      	movs	r1, #248	; 0xf8
 8001110:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001118:	fa91 f1a1 	rbit	r1, r1
 800111c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001120:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001124:	fab1 f181 	clz	r1, r1
 8001128:	b2c9      	uxtb	r1, r1
 800112a:	408b      	lsls	r3, r1
 800112c:	4995      	ldr	r1, [pc, #596]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	e0f5      	b.n	8001320 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8085 	beq.w	800124a <HAL_RCC_OscConfig+0x516>
 8001140:	2301      	movs	r3, #1
 8001142:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001152:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	461a      	mov	r2, r3
 8001168:	2301      	movs	r3, #1
 800116a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fb32 	bl	80007d4 <HAL_GetTick>
 8001170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fb2d 	bl	80007d4 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d902      	bls.n	800118c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	f000 bcd5 	b.w	8001b36 <HAL_RCC_OscConfig+0xe02>
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800119e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a2:	fab3 f383 	clz	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	095b      	lsrs	r3, r3, #5
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d102      	bne.n	80011bc <HAL_RCC_OscConfig+0x488>
 80011b6:	4b73      	ldr	r3, [pc, #460]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	e013      	b.n	80011e4 <HAL_RCC_OscConfig+0x4b0>
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ce:	2302      	movs	r3, #2
 80011d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	2202      	movs	r2, #2
 80011e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ee:	fa92 f2a2 	rbit	r2, r2
 80011f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011fa:	fab2 f282 	clz	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f042 0220 	orr.w	r2, r2, #32
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	f002 021f 	and.w	r2, r2, #31
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f202 	lsl.w	r2, r1, r2
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0af      	beq.n	8001176 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	21f8      	movs	r1, #248	; 0xf8
 8001226:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800122e:	fa91 f1a1 	rbit	r1, r1
 8001232:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001236:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800123a:	fab1 f181 	clz	r1, r1
 800123e:	b2c9      	uxtb	r1, r1
 8001240:	408b      	lsls	r3, r1
 8001242:	4950      	ldr	r1, [pc, #320]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e06a      	b.n	8001320 <HAL_RCC_OscConfig+0x5ec>
 800124a:	2301      	movs	r3, #1
 800124c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800125c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800126a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	461a      	mov	r2, r3
 8001272:	2300      	movs	r3, #0
 8001274:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff faad 	bl	80007d4 <HAL_GetTick>
 800127a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e00a      	b.n	8001296 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff faa8 	bl	80007d4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d902      	bls.n	8001296 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	f000 bc50 	b.w	8001b36 <HAL_RCC_OscConfig+0xe02>
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d102      	bne.n	80012c6 <HAL_RCC_OscConfig+0x592>
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	e013      	b.n	80012ee <HAL_RCC_OscConfig+0x5ba>
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_RCC_OscConfig+0x650>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	2202      	movs	r2, #2
 80012f0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012f8:	fa92 f2a2 	rbit	r2, r2
 80012fc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001300:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001304:	fab2 f282 	clz	r2, r2
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	f002 021f 	and.w	r2, r2, #31
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1af      	bne.n	8001280 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80da 	beq.w	80014e4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d069      	beq.n	800140e <HAL_RCC_OscConfig+0x6da>
 800133a:	2301      	movs	r3, #1
 800133c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800134c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001350:	fab3 f383 	clz	r3, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_OscConfig+0x654>)
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	461a      	mov	r2, r3
 8001360:	2301      	movs	r3, #1
 8001362:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001364:	f7ff fa36 	bl	80007d4 <HAL_GetTick>
 8001368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136c:	e00e      	b.n	800138c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fa31 	bl	80007d4 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d906      	bls.n	800138c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e3d9      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	10908120 	.word	0x10908120
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800139e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013a2:	2202      	movs	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fa93 f2a3 	rbit	r2, r3
 80013b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013ba:	2202      	movs	r2, #2
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fa93 f2a3 	rbit	r2, r3
 80013c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	4ba5      	ldr	r3, [pc, #660]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80013d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013d6:	2102      	movs	r1, #2
 80013d8:	6019      	str	r1, [r3, #0]
 80013da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	fa93 f1a3 	rbit	r1, r3
 80013e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013e8:	6019      	str	r1, [r3, #0]
  return result;
 80013ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0b0      	beq.n	800136e <HAL_RCC_OscConfig+0x63a>
 800140c:	e06a      	b.n	80014e4 <HAL_RCC_OscConfig+0x7b0>
 800140e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f2a3 	rbit	r2, r3
 8001420:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001424:	601a      	str	r2, [r3, #0]
  return result;
 8001426:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800142a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <HAL_RCC_OscConfig+0x934>)
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	461a      	mov	r2, r3
 800143c:	2300      	movs	r3, #0
 800143e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff f9c8 	bl	80007d4 <HAL_GetTick>
 8001444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	e009      	b.n	800145e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff f9c3 	bl	80007d4 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e36b      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
 800145e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001466:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	fa93 f2a3 	rbit	r2, r3
 8001470:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800147a:	2202      	movs	r2, #2
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001492:	2202      	movs	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fa93 f2a3 	rbit	r2, r3
 80014a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a6:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80014a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014ae:	2102      	movs	r1, #2
 80014b0:	6019      	str	r1, [r3, #0]
 80014b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f1a3 	rbit	r1, r3
 80014bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014c0:	6019      	str	r1, [r3, #0]
  return result;
 80014c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1b2      	bne.n	800144a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8158 	beq.w	80017a4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fa:	4b5a      	ldr	r3, [pc, #360]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d112      	bne.n	800152c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b57      	ldr	r3, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a56      	ldr	r2, [pc, #344]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b54      	ldr	r3, [pc, #336]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <HAL_RCC_OscConfig+0x938>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d11a      	bne.n	800156e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001538:	4b4c      	ldr	r3, [pc, #304]	; (800166c <HAL_RCC_OscConfig+0x938>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a4b      	ldr	r2, [pc, #300]	; (800166c <HAL_RCC_OscConfig+0x938>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001544:	f7ff f946 	bl	80007d4 <HAL_GetTick>
 8001548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e009      	b.n	8001562 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154e:	f7ff f941 	bl	80007d4 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e2e9      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <HAL_RCC_OscConfig+0x938>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0ef      	beq.n	800154e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x852>
 8001578:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a39      	ldr	r2, [pc, #228]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	e02f      	b.n	80015e6 <HAL_RCC_OscConfig+0x8b2>
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0x876>
 8001590:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4a33      	ldr	r2, [pc, #204]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6213      	str	r3, [r2, #32]
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	e01d      	b.n	80015e6 <HAL_RCC_OscConfig+0x8b2>
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x89a>
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x8b2>
 80015ce:	4b25      	ldr	r3, [pc, #148]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4a24      	ldr	r2, [pc, #144]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6213      	str	r3, [r2, #32]
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d06b      	beq.n	80016c8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff f8f0 	bl	80007d4 <HAL_GetTick>
 80015f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff f8eb 	bl	80007d4 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e291      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
 8001612:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001640:	601a      	str	r2, [r3, #0]
  return result;
 8001642:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001646:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d109      	bne.n	8001670 <HAL_RCC_OscConfig+0x93c>
 800165c:	4b01      	ldr	r3, [pc, #4]	; (8001664 <HAL_RCC_OscConfig+0x930>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	e014      	b.n	800168c <HAL_RCC_OscConfig+0x958>
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	10908120 	.word	0x10908120
 800166c:	40007000 	.word	0x40007000
 8001670:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fa93 f2a3 	rbit	r2, r3
 8001682:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	4bbb      	ldr	r3, [pc, #748]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001690:	2102      	movs	r1, #2
 8001692:	6011      	str	r1, [r2, #0]
 8001694:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	fa92 f1a2 	rbit	r1, r2
 800169e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80016a2:	6011      	str	r1, [r2, #0]
  return result;
 80016a4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	fab2 f282 	clz	r2, r2
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	f002 021f 	and.w	r2, r2, #31
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d099      	beq.n	80015fa <HAL_RCC_OscConfig+0x8c6>
 80016c6:	e063      	b.n	8001790 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff f884 	bl	80007d4 <HAL_GetTick>
 80016cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	e00b      	b.n	80016ea <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff f87f 	bl	80007d4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e225      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
 80016ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001706:	2202      	movs	r2, #2
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001718:	601a      	str	r2, [r3, #0]
  return result;
 800171a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800171e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d102      	bne.n	800173a <HAL_RCC_OscConfig+0xa06>
 8001734:	4b90      	ldr	r3, [pc, #576]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	e00d      	b.n	8001756 <HAL_RCC_OscConfig+0xa22>
 800173a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	4b89      	ldr	r3, [pc, #548]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800175a:	2102      	movs	r1, #2
 800175c:	6011      	str	r1, [r2, #0]
 800175e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	fa92 f1a2 	rbit	r1, r2
 8001768:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800176c:	6011      	str	r1, [r2, #0]
  return result;
 800176e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	fab2 f282 	clz	r2, r2
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f002 021f 	and.w	r2, r2, #31
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1a0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001790:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4b77      	ldr	r3, [pc, #476]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4a76      	ldr	r2, [pc, #472]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 800179e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 81c2 	beq.w	8001b34 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b0:	4b71      	ldr	r3, [pc, #452]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	f000 819c 	beq.w	8001af6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	f040 8114 	bne.w	80019f2 <HAL_RCC_OscConfig+0xcbe>
 80017ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	fa93 f2a3 	rbit	r2, r3
 80017de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017e2:	601a      	str	r2, [r3, #0]
  return result;
 80017e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	461a      	mov	r2, r3
 80017fc:	2300      	movs	r3, #0
 80017fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7fe ffe8 	bl	80007d4 <HAL_GetTick>
 8001804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	e009      	b.n	800181e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180a:	f7fe ffe3 	bl	80007d4 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e18b      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
 800181e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001836:	601a      	str	r2, [r3, #0]
  return result;
 8001838:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800183c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	095b      	lsrs	r3, r3, #5
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b01      	cmp	r3, #1
 8001850:	d102      	bne.n	8001858 <HAL_RCC_OscConfig+0xb24>
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	e01b      	b.n	8001890 <HAL_RCC_OscConfig+0xb5c>
 8001858:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800185c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001894:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001898:	6011      	str	r1, [r2, #0]
 800189a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	fa92 f1a2 	rbit	r1, r2
 80018a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80018a8:	6011      	str	r1, [r2, #0]
  return result;
 80018aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	fab2 f282 	clz	r2, r2
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	f042 0220 	orr.w	r2, r2, #32
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	f002 021f 	and.w	r2, r2, #31
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d19e      	bne.n	800180a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	4925      	ldr	r1, [pc, #148]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
 80018e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001900:	601a      	str	r2, [r3, #0]
  return result;
 8001902:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001906:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001912:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	461a      	mov	r2, r3
 800191a:	2301      	movs	r3, #1
 800191c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7fe ff59 	bl	80007d4 <HAL_GetTick>
 8001922:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001926:	e009      	b.n	800193c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7fe ff54 	bl	80007d4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0fc      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
 800193c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001940:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001954:	601a      	str	r2, [r3, #0]
  return result;
 8001956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0xc48>
 8001970:	4b01      	ldr	r3, [pc, #4]	; (8001978 <HAL_RCC_OscConfig+0xc44>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	e01e      	b.n	80019b4 <HAL_RCC_OscConfig+0xc80>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800199a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_RCC_OscConfig+0xe0c>)
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019bc:	6011      	str	r1, [r2, #0]
 80019be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	fa92 f1a2 	rbit	r1, r2
 80019c8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019cc:	6011      	str	r1, [r2, #0]
  return result;
 80019ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	fab2 f282 	clz	r2, r2
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	f002 021f 	and.w	r2, r2, #31
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d09b      	beq.n	8001928 <HAL_RCC_OscConfig+0xbf4>
 80019f0:	e0a0      	b.n	8001b34 <HAL_RCC_OscConfig+0xe00>
 80019f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	601a      	str	r2, [r3, #0]
  return result;
 8001a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	461a      	mov	r2, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7fe fed4 	bl	80007d4 <HAL_GetTick>
 8001a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a32:	f7fe fecf 	bl	80007d4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e077      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
 8001a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	601a      	str	r2, [r3, #0]
  return result;
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_OscConfig+0xd4c>
 8001a7a:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <HAL_RCC_OscConfig+0xe0c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	e01b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xd84>
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_RCC_OscConfig+0xe0c>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	f107 0210 	add.w	r2, r7, #16
 8001abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ac0:	6011      	str	r1, [r2, #0]
 8001ac2:	f107 0210 	add.w	r2, r7, #16
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fa92 f1a2 	rbit	r1, r2
 8001acc:	f107 020c 	add.w	r2, r7, #12
 8001ad0:	6011      	str	r1, [r2, #0]
  return result;
 8001ad2:	f107 020c 	add.w	r2, r7, #12
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f042 0220 	orr.w	r2, r2, #32
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f002 021f 	and.w	r2, r2, #31
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d19e      	bne.n	8001a32 <HAL_RCC_OscConfig+0xcfe>
 8001af4:	e01e      	b.n	8001b34 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e018      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_RCC_OscConfig+0xe0c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b0c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b09e      	sub	sp, #120	; 0x78
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e162      	b.n	8001e22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b90      	ldr	r3, [pc, #576]	; (8001da0 <HAL_RCC_ClockConfig+0x25c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d910      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b8d      	ldr	r3, [pc, #564]	; (8001da0 <HAL_RCC_ClockConfig+0x25c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	498b      	ldr	r1, [pc, #556]	; (8001da0 <HAL_RCC_ClockConfig+0x25c>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_RCC_ClockConfig+0x25c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e14a      	b.n	8001e22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b82      	ldr	r3, [pc, #520]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	497f      	ldr	r1, [pc, #508]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80dc 	beq.w	8001d70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d13c      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xf6>
 8001bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_ClockConfig+0xa6>
 8001be4:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	e00f      	b.n	8001c0a <HAL_RCC_ClockConfig+0xc6>
 8001bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	667b      	str	r3, [r7, #100]	; 0x64
 8001bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8001bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c06:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c12:	fa92 f2a2 	rbit	r2, r2
 8001c16:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c1a:	fab2 f282 	clz	r2, r2
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f042 0220 	orr.w	r2, r2, #32
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f002 021f 	and.w	r2, r2, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d17b      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0f3      	b.n	8001e22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d13c      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x178>
 8001c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d102      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x128>
 8001c66:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	e00f      	b.n	8001c8c <HAL_RCC_ClockConfig+0x148>
 8001c6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
 8001c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c88:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c9c:	fab2 f282 	clz	r2, r2
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f042 0220 	orr.w	r2, r2, #32
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f002 021f 	and.w	r2, r2, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d13a      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b2      	b.n	8001e22 <HAL_RCC_ClockConfig+0x2de>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x1a0>
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e00d      	b.n	8001d00 <HAL_RCC_ClockConfig+0x1bc>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	623b      	str	r3, [r7, #32]
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2202      	movs	r2, #2
 8001d02:	61ba      	str	r2, [r7, #24]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	fa92 f2a2 	rbit	r2, r2
 8001d0a:	617a      	str	r2, [r7, #20]
  return result;
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	fab2 f282 	clz	r2, r2
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f002 021f 	and.w	r2, r2, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e079      	b.n	8001e22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f023 0203 	bic.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	491a      	ldr	r1, [pc, #104]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d40:	f7fe fd48 	bl	80007d4 <HAL_GetTick>
 8001d44:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f7fe fd44 	bl	80007d4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e061      	b.n	8001e22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_RCC_ClockConfig+0x260>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 020c 	and.w	r2, r3, #12
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1eb      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_ClockConfig+0x25c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d214      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_RCC_ClockConfig+0x25c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	4906      	ldr	r1, [pc, #24]	; (8001da0 <HAL_RCC_ClockConfig+0x25c>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <HAL_RCC_ClockConfig+0x25c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e040      	b.n	8001e22 <HAL_RCC_ClockConfig+0x2de>
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_RCC_ClockConfig+0x2e8>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	491a      	ldr	r1, [pc, #104]	; (8001e2c <HAL_RCC_ClockConfig+0x2e8>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_RCC_ClockConfig+0x2e8>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4912      	ldr	r1, [pc, #72]	; (8001e2c <HAL_RCC_ClockConfig+0x2e8>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001de6:	f000 f829 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dea:	4601      	mov	r1, r0
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_RCC_ClockConfig+0x2e8>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df4:	22f0      	movs	r2, #240	; 0xf0
 8001df6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	fa92 f2a2 	rbit	r2, r2
 8001dfe:	60fa      	str	r2, [r7, #12]
  return result;
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	40d3      	lsrs	r3, r2
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x2ec>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_RCC_ClockConfig+0x2f0>)
 8001e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_RCC_ClockConfig+0x2f4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fc96 	bl	800074c <HAL_InitTick>
  
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3778      	adds	r7, #120	; 0x78
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	08002888 	.word	0x08002888
 8001e34:	20000008 	.word	0x20000008
 8001e38:	2000000c 	.word	0x2000000c

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d002      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x30>
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d003      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0x36>
 8001e6a:	e03c      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e6c:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e6e:	623b      	str	r3, [r7, #32]
      break;
 8001e70:	e03c      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e78:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e7c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	fa92 f2a2 	rbit	r2, r2
 8001e84:	607a      	str	r2, [r7, #4]
  return result;
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	fab2 f282 	clz	r2, r2
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	40d3      	lsrs	r3, r2
 8001e90:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	fa92 f2a2 	rbit	r2, r2
 8001ea8:	60fa      	str	r2, [r7, #12]
  return result;
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	40d3      	lsrs	r3, r2
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed4:	e004      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	623b      	str	r3, [r7, #32]
      break;
 8001ee4:	e002      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ee8:	623b      	str	r3, [r7, #32]
      break;
 8001eea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eec:	6a3b      	ldr	r3, [r7, #32]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	372c      	adds	r7, #44	; 0x2c
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	007a1200 	.word	0x007a1200
 8001f04:	08002898 	.word	0x08002898
 8001f08:	080028a8 	.word	0x080028a8
 8001f0c:	003d0900 	.word	0x003d0900

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e01d      	b.n	8001f5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fb30 	bl	800059c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 fa34 	bl	80023bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_TIM_Base_Start_IT+0x50>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d00b      	beq.n	8001faa <HAL_TIM_Base_Start_IT+0x42>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f98:	d007      	beq.n	8001faa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	00010007 	.word	0x00010007

08001fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d11b      	bne.n	8002018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0202 	mvn.w	r2, #2
 8001fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f9be 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f9b0 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f9c1 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d122      	bne.n	800206c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b04      	cmp	r3, #4
 8002032:	d11b      	bne.n	800206c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0204 	mvn.w	r2, #4
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f994 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f986 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f997 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b08      	cmp	r3, #8
 8002078:	d122      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b08      	cmp	r3, #8
 8002086:	d11b      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0208 	mvn.w	r2, #8
 8002090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2204      	movs	r2, #4
 8002096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f96a 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f95c 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f96d 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0210 	mvn.w	r2, #16
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2208      	movs	r2, #8
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f940 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f932 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f943 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0201 	mvn.w	r2, #1
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe f85a 	bl	80001f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b80      	cmp	r3, #128	; 0x80
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fadc 	bl	8002724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217a:	d10e      	bne.n	800219a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d107      	bne.n	800219a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 facf 	bl	8002738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d10e      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d107      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f8f1 	bl	80023a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d10e      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d107      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f06f 0220 	mvn.w	r2, #32
 80021ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fa8f 	bl	8002710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_TIM_ConfigClockSource+0x18>
 800220e:	2302      	movs	r3, #2
 8002210:	e0a8      	b.n	8002364 <HAL_TIM_ConfigClockSource+0x16a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002230:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002234:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800223c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	d067      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x124>
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d80b      	bhi.n	800226a <HAL_TIM_ConfigClockSource+0x70>
 8002252:	2b10      	cmp	r3, #16
 8002254:	d073      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x144>
 8002256:	2b10      	cmp	r3, #16
 8002258:	d802      	bhi.n	8002260 <HAL_TIM_ConfigClockSource+0x66>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06f      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800225e:	e078      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002260:	2b20      	cmp	r3, #32
 8002262:	d06c      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x144>
 8002264:	2b30      	cmp	r3, #48	; 0x30
 8002266:	d06a      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002268:	e073      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800226a:	2b70      	cmp	r3, #112	; 0x70
 800226c:	d00d      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x90>
 800226e:	2b70      	cmp	r3, #112	; 0x70
 8002270:	d804      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x82>
 8002272:	2b50      	cmp	r3, #80	; 0x50
 8002274:	d033      	beq.n	80022de <HAL_TIM_ConfigClockSource+0xe4>
 8002276:	2b60      	cmp	r3, #96	; 0x60
 8002278:	d041      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0x104>
      break;
 800227a:	e06a      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	d066      	beq.n	8002350 <HAL_TIM_ConfigClockSource+0x156>
 8002282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002286:	d017      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002288:	e063      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6899      	ldr	r1, [r3, #8]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f000 f999 	bl	80025d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	609a      	str	r2, [r3, #8]
      break;
 80022b6:	e04c      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6899      	ldr	r1, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f000 f982 	bl	80025d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022da:	609a      	str	r2, [r3, #8]
      break;
 80022dc:	e039      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f000 f8f6 	bl	80024dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2150      	movs	r1, #80	; 0x50
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f94f 	bl	800259a <TIM_ITRx_SetConfig>
      break;
 80022fc:	e029      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	461a      	mov	r2, r3
 800230c:	f000 f915 	bl	800253a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2160      	movs	r1, #96	; 0x60
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f93f 	bl	800259a <TIM_ITRx_SetConfig>
      break;
 800231c:	e019      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	461a      	mov	r2, r3
 800232c:	f000 f8d6 	bl	80024dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2140      	movs	r1, #64	; 0x40
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f92f 	bl	800259a <TIM_ITRx_SetConfig>
      break;
 800233c:	e009      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f000 f926 	bl	800259a <TIM_ITRx_SetConfig>
      break;
 800234e:	e000      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002350:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <TIM_Base_SetConfig+0x104>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00f      	beq.n	80023f4 <TIM_Base_SetConfig+0x38>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023da:	d00b      	beq.n	80023f4 <TIM_Base_SetConfig+0x38>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a39      	ldr	r2, [pc, #228]	; (80024c4 <TIM_Base_SetConfig+0x108>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <TIM_Base_SetConfig+0x38>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a38      	ldr	r2, [pc, #224]	; (80024c8 <TIM_Base_SetConfig+0x10c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d003      	beq.n	80023f4 <TIM_Base_SetConfig+0x38>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a37      	ldr	r2, [pc, #220]	; (80024cc <TIM_Base_SetConfig+0x110>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a2d      	ldr	r2, [pc, #180]	; (80024c0 <TIM_Base_SetConfig+0x104>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01b      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d017      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <TIM_Base_SetConfig+0x108>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <TIM_Base_SetConfig+0x10c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00f      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a28      	ldr	r2, [pc, #160]	; (80024cc <TIM_Base_SetConfig+0x110>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00b      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <TIM_Base_SetConfig+0x114>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <TIM_Base_SetConfig+0x118>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d003      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d108      	bne.n	8002458 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <TIM_Base_SetConfig+0x104>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00f      	beq.n	80024a4 <TIM_Base_SetConfig+0xe8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <TIM_Base_SetConfig+0x110>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00b      	beq.n	80024a4 <TIM_Base_SetConfig+0xe8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <TIM_Base_SetConfig+0x114>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <TIM_Base_SetConfig+0xe8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <TIM_Base_SetConfig+0x118>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d003      	beq.n	80024a4 <TIM_Base_SetConfig+0xe8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	615a      	str	r2, [r3, #20]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40000800 	.word	0x40000800
 80024cc:	40013400 	.word	0x40013400
 80024d0:	40014000 	.word	0x40014000
 80024d4:	40014400 	.word	0x40014400
 80024d8:	40014800 	.word	0x40014800

080024dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 0201 	bic.w	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f023 030a 	bic.w	r3, r3, #10
 8002518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800253a:	b480      	push	{r7}
 800253c:	b087      	sub	sp, #28
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f023 0210 	bic.w	r2, r3, #16
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	031b      	lsls	r3, r3, #12
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002576:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	621a      	str	r2, [r3, #32]
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f043 0307 	orr.w	r3, r3, #7
 80025bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	021a      	lsls	r2, r3, #8
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002624:	2302      	movs	r3, #2
 8002626:	e063      	b.n	80026f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d004      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d108      	bne.n	800266e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d018      	beq.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269a:	d013      	beq.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00e      	beq.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a12      	ldr	r2, [pc, #72]	; (8002700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a13      	ldr	r2, [pc, #76]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d10c      	bne.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40012c00 	.word	0x40012c00
 8002700:	40013400 	.word	0x40013400
 8002704:	40000400 	.word	0x40000400
 8002708:	40000800 	.word	0x40000800
 800270c:	40014000 	.word	0x40014000

08002710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <__libc_init_array>:
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	4e0d      	ldr	r6, [pc, #52]	; (8002784 <__libc_init_array+0x38>)
 8002750:	4c0d      	ldr	r4, [pc, #52]	; (8002788 <__libc_init_array+0x3c>)
 8002752:	1ba4      	subs	r4, r4, r6
 8002754:	10a4      	asrs	r4, r4, #2
 8002756:	2500      	movs	r5, #0
 8002758:	42a5      	cmp	r5, r4
 800275a:	d109      	bne.n	8002770 <__libc_init_array+0x24>
 800275c:	4e0b      	ldr	r6, [pc, #44]	; (800278c <__libc_init_array+0x40>)
 800275e:	4c0c      	ldr	r4, [pc, #48]	; (8002790 <__libc_init_array+0x44>)
 8002760:	f000 f820 	bl	80027a4 <_init>
 8002764:	1ba4      	subs	r4, r4, r6
 8002766:	10a4      	asrs	r4, r4, #2
 8002768:	2500      	movs	r5, #0
 800276a:	42a5      	cmp	r5, r4
 800276c:	d105      	bne.n	800277a <__libc_init_array+0x2e>
 800276e:	bd70      	pop	{r4, r5, r6, pc}
 8002770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002774:	4798      	blx	r3
 8002776:	3501      	adds	r5, #1
 8002778:	e7ee      	b.n	8002758 <__libc_init_array+0xc>
 800277a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800277e:	4798      	blx	r3
 8002780:	3501      	adds	r5, #1
 8002782:	e7f2      	b.n	800276a <__libc_init_array+0x1e>
 8002784:	080028b8 	.word	0x080028b8
 8002788:	080028b8 	.word	0x080028b8
 800278c:	080028b8 	.word	0x080028b8
 8002790:	080028bc 	.word	0x080028bc

08002794 <memset>:
 8002794:	4402      	add	r2, r0
 8002796:	4603      	mov	r3, r0
 8002798:	4293      	cmp	r3, r2
 800279a:	d100      	bne.n	800279e <memset+0xa>
 800279c:	4770      	bx	lr
 800279e:	f803 1b01 	strb.w	r1, [r3], #1
 80027a2:	e7f9      	b.n	8002798 <memset+0x4>

080027a4 <_init>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr

080027b0 <_fini>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr
